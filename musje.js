!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){var r=n(1),i=n(2);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var o={insert:"head",singleton:!1},a=(r(i,o),i.locals?i.locals:{});t.exports=a},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),a=[];function s(t){for(var e=-1,n=0;n<a.length;n++)if(a[n].identifier===t){e=n;break}return e}function u(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],u=e.base?o[0]+e.base:o[0],c=n[u]||0,f="".concat(u," ").concat(c);n[u]=c+1;var l=s(f),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==l?(a[l].references++,a[l].updater(h)):a.push({identifier:f,updater:d(h,e),references:1}),r.push(f)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var f,l=(f=[],function(t,e){return f[t]=e,f.filter(Boolean).join("\n")});function h(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}function y(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,b=0;function d(t,e){var n,r,i;if(e.singleton){var o=b++;n=p||(p=c(e)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=c(e),r=y.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=u(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=u(t,e),c=0;c<n.length;c++){var f=s(n[c]);0===a[f].references&&(a[f].updater(),a.splice(f,1))}n=o}}}},function(t,e,n){var r=n(3),i=n(4),o=n(5);e=r(!1);var a=i(o);e.push([t.i,'@font-face {\n  font-family: "Cadence";\n  src: url('+a+') format("woff");\n  font-weight: normal;\n  font-style: normal;\n}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([i]).join("\n")}var a,s,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},function(t,e,n){"use strict";t.exports=function(t,e){return e||(e={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,e,n){"use strict";n.r(e),e.default="data:font/woff;base64,"},function(t,e,n){"use strict";n.r(e);var r=[].concat,i=function(t){return r.apply([],t)},o=function(t,e){return new Array(e+1).join(t)},a=function(t){return t[t.length-1]},s=function(t){return Math.min.apply(null,t)},u=function(t){return Math.max.apply(null,t)},c=function(t){return t.reduce((function(t,e){return t+e}))},f=function(t,e){void 0===e&&(e=t,t=0);for(var n=[],r=t;r<e;r++)n.push(r);return n},l=function(t){for(var e=[],n=0;n<t;n++)e.push(0);return e},h=function(t){var e={};return t.forEach((function(t){e[t]=!0})),e},y=function(t){return e=h(t),Object.keys(e);var e},p=function(t){var e={};for(var n in t)e[t[n]]=n;return e},b=[].slice;function d(){var t=["name"].concat(b.apply(arguments));return function(){var e=this,n={};return t.forEach((function(t){n[t]=e[t]})),n}}var v,m=function(t,e,n){var r=document.createElementNS("http://www.w3.org/2000/svg",t);for(var i in e)r.setAttribute(i,e[i]);return n.appendChild?r.appendChild(n):r.textContent=n,r},g={},w=function(t,e){var n=t+e;if(g[n])return g[n];!function(){if(v)return v;v=m("text",{x:0,y:50},"");var t=m("svg",{width:0,height:0},v);document.body.appendChild(t)}();var r="font-family: ".concat(t.family,"; font-size: ").concat(t.size);v.setAttribute("style",r),v.textContent=e;var i=v.getBBox(),o={width:i.width,height:i.height};return g[n]=o,o};function O(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function S(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function k(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function j(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function x(t,e,n){return e&&j(t.prototype,e),n&&j(t,n),t}var L=function(){function t(e){k(this,t),this.data=e.split("\n"),this.ln=-1,this.nextLine()}return x(t,[{key:"nextLine",value:function(){this.ln++,this.line=new P(this.data[this.ln])}},{key:"eof",get:function(){return this.ln===this.data.length-1&&this.line.eol}}]),t}(),P=function(){function t(e){k(this,t),this.str=e,this.rest=e,this.col=0}return x(t,[{key:"advance",value:function(t){this.col+=t,this.rest=this.rest.substr(t)}},{key:"eol",get:function(){return 0===this.rest.length}}]),t}(),E={S:" ",SS:" +"},A=function(t){t=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?O(Object(n),!0).forEach((function(e){S(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):O(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},E,{},t);var e=[{},{}];for(var n in t)e[0][n]=new RegExp(t[n]),e[1][n]=new RegExp("^"+t[n]);return e};function D(t){return function(){function e(n){k(this,e),this.name="lexer",this.src=n.replace(/\r\n/g,"\n"),this.lines=new L(this.src);var r=A(t);this.withoutPatterns=r[0],this.patterns=r[1]}return x(e,[{key:"nextLine",value:function(){this.lines.nextLine()}},{key:"getPattern",value:function(t){if(t in this.patterns)return this.patterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"getWithoutPattern",value:function(t){if(t in this.withoutPatterns)return this.withoutPatterns[t];this.error("Undefined token [".concat(t,"]"))}},{key:"eat",value:function(t){var e=this.line.rest.match(this.getPattern(t));e||this.error("token [".concat(t,"]")),this.lexeme=e[0],this.line.advance(this.lexeme.length)}},{key:"is",value:function(t){return this.getPattern(t).test(this.line.rest)}},{key:"token",value:function(t,e){this.eat(t),e&&e(this.lexeme)}},{key:"optional",value:function(t,e){this.lexeme="",this.is(t)&&this.eat(t),e&&e(this.lexeme)}},{key:"without",value:function(t,e){var n=this.line.rest.match(this.getWithoutPattern(t));this.lexeme=n?this.line.rest.substr(0,n.index):this.line.rest,this.line.advance(this.lexeme.length),e&&e(this.lexeme)}},{key:"mlwithout",value:function(t,e){for(var n=this.getWithoutPattern(t),r=[],i=this.line.rest.match(n);!i&&(r.push(this.line.rest),this.line.advance(this.line.rest.length),!this.eof);)this.nextLine(),i=this.line.rest.match(n);if(i){var o=this.line.rest.substr(0,i.index);r.push(o),this.line.advance(o.length)}this.lexeme=r.join("\n"),e&&e(this.lexeme)}},{key:"error",value:function(t){throw new Error("".concat(t," at line ").concat(this.ln+1," column ").concat(this.col+1,".\n").concat(this.line.str,"\n").concat(o(" ",this.line.col),"^"))}},{key:"skipSS",value:function(){this.optional("SS")}},{key:"skipWhite",value:function(){for(;(this.is("S")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.token("SS")}},{key:"line",get:function(){return this.lines.line}},{key:"ln",get:function(){return this.lines.ln}},{key:"col",get:function(){return this.line.col}},{key:"eol",get:function(){return this.line.eol}},{key:"eof",get:function(){return this.lines.eof}}]),e}()}function R(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var T=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("value"),this.name="sl-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("//"),t.token("all",(function(t){e.value=t}))}},{key:"toString",value:function(){return"//"+this.value}}])&&R(e.prototype,n),r&&R(e,r),t}();function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var C=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("value"),this.name="ml-comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("/*"),t.mlwithout("*/",(function(t){e.value=t})),t.token("*/")}},{key:"toString",value:function(){return"/*".concat(this.value,"*/")}}])&&N(e.prototype,n),r&&N(e,r),t}(),z="⺀-⿕㆐-㆟㐀-䶿一-鿌豈-節",B="A-Za-zÀ-ɏ".concat(z),M=D({0:"0",",":",","/":"\\/","\\":"\\\\","<":"<",">":">","|":"\\|","~":"~","-":"-","(":"\\(",")":"\\)","[":"\\[","]":"\\]",":":":","/\\":"[\\/\\\\]","==":"==","--":"--","//":"\\/\\/","/*":"\\/\\*","*/":"\\*\\/",digit:"\\d",digits:"\\d+",paran:"[\\(\\)]",letter:"[".concat(B,"]"),word:"[".concat(B,"]+"),words:"[".concat(B," ]+"),abbreviation:"[".concat(B,"\\.]+"),midi:"midi",channel:"channel",program:"program",pan:"pan",title:"title:",subtitle:"subtitle:",composer:"composer:",lyricist:"lyricist:",arranger:"arranger:",source:"source:",beats:"[1-9]\\d{0,3}",beatType:"[1-9]\\d{0,3}",step:"[1-7]",accidental:"(#{1,2}|n|b{1,2})",octave:"('{1,5}|,{1,5})",type:"(---|-|={0,5}_|={1,5})",dots:"\\.{1,2}",pitch:"[#nb]*[1-7][,']*",duration:"[-_=]*.{1,2}",time:"[1-9]\\d{0,3}\\/",note:"\\(*(\\[\\d+:)*".concat("[#nb]*[1-7][,']*"),rest:"0",chord:"\\(*(\\[\\d+:)*<(".concat("[#nb]*[1-7][,']*",")*>"),multipart:"<",direction:"[\\/\\\\][".concat(B," ]+"),bar:"(:\\|:?|\\|:|\\|[\\|\\]]?)",wedge:"wedge",dynamics:"(p{1,6}|f{1,6}|m[pf]|sfp{0,2}|fp|rfz?|sf{1,2}z|fz)","tuplet-begin":"\\[\\d+:","tuplet-end":":\\]","lyrics-head":"lyrics.*:",lyric:"([A-Za-zÀ-ɏ,\\.!']+|[".concat(z,"])"),"lyric-control":"[@\\+\\-]m?\\d","lyric-control-symbol":"[@\\+\\-]",m:"m",cell:"([\\(\\[]*[#nb]?\\d|<|[\\:\\|]|[\\/\\\\])","part-head":"==","sl-comment":"\\/\\/","ml-comment":"\\/\\*",comment:"\\/[\\/\\*]",all:".*"});M.prototype.skipWhite=function(){for(;(this.is("S")||this.is("comment")||this.eol)&&!this.eof;)this.eol?this.nextLine():this.is("S")?this.token("SS"):this.is("sl-comment")?new T(this):new C(this)};var F=M;function Q(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function G(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var W=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Q(this,t),this.toJSON=d("title","subtitle","composer","lyricist","arranger","source"),this.name="head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.title=e.title,this.subtitle=e.subtitle,this.composer=e.composer,this.lyricist=e.lyricist,this.arranger=e.arranger,this.source=e.source)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(var e=this,n=function(n){t.token(n),t.without("comment",(function(t){e[n]=t.trim()}))};!t.eof;){if(t.is("title"))n("title");else if(t.is("subtitle"))n("subtitle");else if(t.is("composer"))n("composer");else if(t.is("lyricist"))n("lyricist");else if(t.is("arranger"))n("arranger");else{if(!t.is("source"))break;n("source")}t.skipWhite()}}},{key:"toString",value:function(){var t=[];return this.title&&t.push("title: ".concat(this.title)),this.subtitle&&t.push("subtitle: ".concat(this.subtitle)),this.composer&&t.push("composer: ".concat(this.composer)),this.lyricist&&t.push("lyricist: ".concat(this.lyricist)),this.arranger&&t.push("arranger: ".concat(this.arranger)),this.source&&t.push("source: ".concat(this.source)),t.join("\n")}}])&&G(e.prototype,n),r&&G(e,r),t}();function J(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var I=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};J(this,t),this.toJSON=d("partName","midi"),this.name="part-head","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.partName=e.partName,this.abbreviation=e.abbreviation||"",this.midi=e.midi)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;if(t.token("=="),t.token("words",(function(t){e.partName=t.trim()})),t.skipSS(),this.abbreviation="",t.is("(")&&(t.token("("),t.token("abbreviation",(function(t){e.abbreviation=t})),t.token(")")),t.is(":")){t.token(":"),t.skipSS();var n=this.midi={};t.token("midi"),t.token("("),t.token("channel"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.channel=+t})),t.token(","),t.skipSS(),t.token("program"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.program=+t})),t.token(","),t.skipSS(),t.token("pan"),t.token(":"),t.skipSS(),t.token("digits",(function(t){n.pan=+t})),t.token(")")}t.skipWhite()}},{key:"toString",value:function(){var t=this.partName,e=this.abbreviation,n=this.midi,r=["=="];if(t&&r.push(t),e&&r.push("(".concat(e,")")),n){r[r.length-1]+=":";var i=n.channel,o=n.program,a=n.pan,s=[];"number"==typeof i&&s.push("channel: ".concat(i)),"number"==typeof o&&s.push("program: ".concat(o)),"number"==typeof a&&s.push("pan: ".concat(a)),r.push("midi(".concat(s.join(", "),")"))}return r.join(" ")}}])&&q(e.prototype,n),r&&q(e,r),t}(),V=14898723840;function U(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var K=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("beats","beatType"),this.name="time","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.beats=e.beats,this.beatType=e.beatType)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("beats",(function(t){e.beats=+t})),t.token("/"),t.token("beatType",(function(t){e.beatType=+t}))}},{key:"toString",value:function(){return"".concat(this.beats,"/").concat(this.beatType)}}])&&U(e.prototype,n),r&&U(e,r),t}();function X(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"defaultOnplay",value:function(){}},{key:"defaultOnstop",value:function(){}},{key:"onplay",get:function(){return this._onplay||this.defaultOnplay.bind(this)},set:function(t){var e=this.onplay;this._onplay=function(){e(),t()}}},{key:"onstop",get:function(){return this._onstop||this.defaultOnstop.bind(this)},set:function(t){var e=this.onstop;this._onstop=function(){e(),t()}}}])&&X(e.prototype,n),r&&X(e,r),t}();function Z(t){return(Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _(t,e){return!e||"object"!==Z(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function $(t){return($=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function tt(t,e){return(tt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var et={1:0,2:2,3:4,4:5,5:7,6:9,7:11},nt={"#":1,"##":2,n:0,"":0,b:-1,bb:-2},rt=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=_(this,$(e).call(this))).toJSON=d("step","accidental","octave"),n.name="pitch","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):(n.step=t.step||1,n.accidental=t.accidental||"",n.octave=t.octave||0),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&tt(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){var e=this;t.optional("accidental",(function(t){e.accidental=t})),t.token("step",(function(t){e.step=+t})),t.optional("octave",(function(t){e.octave="'"===t[0]?t.length:","===t[0]?-t.length:0}))}},{key:"defaultOnplay",value:function(){this.tie&&this.tie.onplay()}},{key:"defaultOnstop",value:function(){this.tie&&this.tie.onstop()}},{key:"toString",value:function(){var t=this.step,e=this.accidental,n=this.octave,r=n>0?o("'",n):o(",",-n);return"".concat(e).concat(t).concat(r)}},{key:"alter",get:function(){return"number"==typeof this._alter?this._alter:nt[this.accidental]},set:function(t){this._alter=t}},{key:"midiNumber",get:function(){return et[this.step]+this.alter+12*this.octave+60}},{key:"frequency",get:function(){return 440*Math.pow(2,(this.midiNumber-69)/12)}}])&&Y(n.prototype,r),i&&Y(n,i),e}(H);function it(t){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ot(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function at(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function st(t){return(st=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ut(t,e){return(ut=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ct={"---":1,"-":2,"":4,_:8,"=":16,"=_":32,"==":64,"==_":128,"===":256,"===_":512,"====":1024},ft=p(ct),lt=[1,1.5,1.75],ht=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=at(this,st(e).call(this))).toJSON=d("type","dots","modification"),n.name="duration","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):(n.type=t.type||4,n.dots=t.dots||0,n.modification=t.modification),n.type>4&&n.initBeams(),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ut(t,e)}(e,t),n=e,(r=[{key:"initBeams",value:function(){this.numBeams=Math.log2(this.type)-2,this.beams=f(this.numBeams).map((function(){return{type:"single"}}))}},{key:"parse",value:function(t){var e=this;t.optional("type",(function(t){e.type=ct[t]})),t.optional("dots",(function(t){e.dots=t.length}))}},{key:"toString",value:function(){return"".concat(ft[this.type]).concat(o(".",this.dots))}},{key:"quartersQ",get:function(){var t=this.modification;return 4*V/this.type*lt[this.dots]*(t?t.normal/t.actual:1)}},{key:"quarters",get:function(){return this.quartersQ/V}}])&&ot(n.prototype,r),i&&ot(n,i),e}(H);function yt(t){return(yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function bt(t,e){return!e||"object"!==yt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function dt(t){return(dt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function vt(t,e){return(vt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var mt=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=bt(this,dt(e).call(this))).toJSON=d("type"),n.name="tie","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):(n.type=t.type,n.cell=t.cell),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&vt(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){var e=this;t.token("~",(function(){e.type="begin"}))}},{key:"toString",value:function(){return"end"===this.type?"":"~"}}])&&pt(n.prototype,r),i&&pt(n,i),e}(H);function gt(t){return(gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function wt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ot(t,e){return!e||"object"!==gt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function St(t){return(St=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function kt(t,e){return(kt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var jt=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=Ot(this,St(e).call(this))).toJSON=d("value"),n.name="slur","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):n.value=t.value,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&kt(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){var e=this;t.token("paran",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&wt(n.prototype,r),i&&wt(n,i),e}(H);function xt(t){return(xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Lt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Pt(t,e){return!e||"object"!==xt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Et(t){return(Et=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function At(t,e){return(At=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Dt=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=Pt(this,Et(e).call(this))).toJSON=d("type"),n.name="tuplet","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):n.type=t.type,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&At(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){var e=this;t.is("[")?(t.token("[",(function(){e.type="begin"})),t.token("digits",(function(t){e.actual=+t})),this.normal=2,t.token(":")):t.is("tuplet-end")&&t.token("tuplet-end",(function(){e.type="end"}))}},{key:"toString",value:function(){return this.type}}])&&Lt(n.prototype,r),i&&Lt(n,i),e}(H);function Rt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Tt=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("syllabic","text"),this.name="lyric",this.prev=n,"lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.syllabic=e.syllabic,this.text=e.text)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("lyric",(function(t){e.text=t})),t.skipWhite(),!t.is("-")||t.is("--")||t.is("lyric-control")?function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="end";break;case"end":case"single":default:e.syllabic="single"}}():(function(){switch(e.prev&&e.prev.syllabic){case"begin":case"middle":e.syllabic="middle";break;case"end":case"single":default:e.syllabic="begin"}}(),t.token("-"),t.skipWhite())}},{key:"toString",value:function(){switch(this.syllabic){case"single":case"end":return this.text;case"begin":case"middle":return"".concat(this.text," -")}return this.text}}])&&Rt(e.prototype,n),r&&Rt(e,r),t}();function Nt(t){return(Nt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zt(t,e){return!e||"object"!==Nt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Bt(t){return(Bt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Mt(t,e){return(Mt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Ft=function(t){function e(t){var n;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=zt(this,Bt(e).call(this))).toJSON=d("pitch","duration","tie","tuplet","beginSlurs","endSlurs","lyric"),n.name="note","lexer"===t.name)n.parse(t);else if("string"==typeof t)n.parse(new F(t));else{var r=t.pitch,i=t.duration,o=t.articulations,a=t.tie,s=t.beginSlurs,u=t.endSlurs,c=t.tuplet,f=t.lyrics;n.pitch=new rt(r),n.duration=new ht(i),o&&(n.articulations=o),a&&(n.tie=new mt(a)),s&&(n.beginSlurs=s.map((function(t){return new jt(t)}))),u&&(n.endSlurs=u.map((function(t){return new jt(t)}))),c&&(n.tuplet=c),f&&(n.lyrics=f.map((function(t){return new Tt(t)})))}return n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Mt(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){for(;t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new jt(t));for(;t.is("[");)this.tuplet=new Dt(t);for(this.pitch=new rt(t),this.duration=new ht(t);t.is("tuplet-end");)this.tuplet=new Dt(t);for(t.is("~")&&(this.tie=new mt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new jt(t))}},{key:"defaultOnplay",value:function(){this.pitch.onplay(),this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.pitch.onstop(),this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.articulations,n=this.beginSlurs,r=this.endSlurs,i=this.tuplet,o=this.duration,a=this.tie;return n&&t.push(n.join("")),i&&"begin"===i.type&&t.push("[".concat(o.modification.actual,":")),e&&t.push("x"),t.push("".concat(this.pitch).concat(o)),i&&"end"===i.type&&t.push(":]"),r&&t.push(r.join("")),a&&t.push(this.tie),t.join("")}}])&&Ct(n.prototype,r),i&&Ct(n,i),e}(H);function Qt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Gt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("duration"),this.name="rest","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.duration=new ht(e.duration)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){t.token("0"),this.duration=new ht(t)}},{key:"toString",value:function(){return"0"+this.duration}}])&&Qt(e.prototype,n),r&&Qt(e,r),t}();function Wt(t){return(Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function qt(t,e){return!e||"object"!==Wt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function It(t){return(It=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Vt(t,e){return(Vt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Ut=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=qt(this,It(e).call(this))).toJSON=d("pitches","duration","tuplet","tie","beginSlurs","endSlurs","lyric"),n.name="chord","lexer"===t.name?n.parse(t):"string"==typeof t?n.parse(new F(t)):(n.pitches=t.pitches.map((function(t){return new rt(t)})),n.duration=new ht(t.duration),tie&&(n.tie=new mt(tie)),beginSlurs&&(n.beginSlurs=beginSlurs.map((function(t){return new jt(t)}))),endSlurs&&(n.endSlurs=endSlurs.map((function(t){return new jt(t)}))),tuplet&&(n.tuplet=tuplet),lyrics&&(n.lyrics=lyrics.map((function(t){return new Lyric(t)})))),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Vt(t,e)}(e,t),n=e,(r=[{key:"parse",value:function(t){for(this.pitches=[];t.is("(");)this.beginSlurs=this.beginSlurs||[],this.beginSlurs.push(new jt(t));for(;t.is("[");)this.tuplet=new Dt(t);for(t.token("<");t.is("pitch");)this.pitches.push(new rt(t));for(t.token(">"),this.duration=new ht(t),t.is("~")&&(this.tie=new mt(t));t.is("tuplet-end");)this.tuplet=new Dt(t);for(t.is("~")&&(this.tie=new mt(t));t.is(")");)this.endSlurs=this.endSlurs||[],this.endSlurs.push(new jt(t))}},{key:"defaultOnplay",value:function(){this.duration.onplay(),this.tie&&this.tie.onplay(),this.tuplet&&this.tuplet.onplay(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onplay()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onplay()}))}},{key:"defaultOnstop",value:function(){this.duration.onstop(),this.tie&&this.tie.onstop(),this.tuplet&&this.tuplet.onstop(),this.beginSlurs&&this.beginSlurs.forEach((function(t){return t.onstop()})),this.endSlurs&&this.endSlurs.forEach((function(t){return t.onstop()}))}},{key:"toString",value:function(){var t=[],e=this.beginSlurs,n=this.endSlurs,r=this.tuplet,i=this.duration,o=this.tie;return e&&t.push(e.join("")),r&&"begin"===r.type&&t.push("[".concat(i.modification.actual,":")),t.push("<".concat(this.pitches.join(""),">").concat(this.duration)),r&&"end"===r.type&&t.push(":]"),n&&t.push(n.join("")),o&&t.push(this.tie),t.join("")}}])&&Jt(n.prototype,r),i&&Jt(n,i),e}(H);function Kt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Xt=function(){function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("placement","words","wedge","dynamics"),this.name="direction","lexer"===e.name)this.parse(e);else if("string"==typeof e)this.parse(new F(e));else{this.placement=e.placement;var n=e.words,r=e.wedge,i=e.dynamics;n&&(this.words=n),r&&(this.wedge=r),i&&(this.dynamics=i)}}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("/\\",(function(t){e.placement="/"===t?"above":"below"})),t.is("wedge")?(t.token("wedge"),t.token("("),t.token("words",(function(t){e.wedge=t.trim()})),t.token(")")):t.is("dynamics")?t.token("dynamics",(function(t){e.dynamics=t})):t.is("words")&&t.token("words",(function(t){e.words=t.trim()}))}},{key:"toString",value:function(){var t=[],e=this.placement,n=this.words,r=this.wedge,i=this.dynamics;return t.push("above"===e?"/":"\\"),n&&t.push(n),r&&t.push("wedge(".concat(r,")")),i&&t.push(i),t.join("")}}])&&Kt(e.prototype,n),r&&Kt(e,r),t}();function Ht(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Zt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("data"),this.name="layer","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.data=e.data.map((function(t){switch(t.name){case"note":return new Ft(t);case"rest":return new Gt(t);case"chord":return new Ut(t);case"direction":return new Xt(t);default:throw new Error("Music data: ".concat(t))}}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("note"))this.data.push(new Ft(t));else if(t.is("rest"))this.data.push(new Gt(t));else if(t.is("chord"))this.data.push(new Ut(t));else if(t.is("direction"))this.data.push(new Xt(t));else{if(t.is("|")){t.token("|"),t.skipWhite();break}if(t.is(">"))break;t.error("music data in layer")}t.skipWhite()}}},{key:"toString",value:function(){return this.data.join(" ")}}])&&Ht(e.prototype,n),r&&Ht(e,r),t}();function Yt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var _t=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("layers"),this.name="multipart","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.layers=e.layers.map((function(t){return new Zt(t)}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.layers=[],t.token("<"),t.skipWhite();!t.is(">")&&!t.eof;)this.layers.push(new Zt(t));t.token(">")}},{key:"toString",value:function(){return"<".concat(this.layers.join(" | "),">")}}])&&Yt(e.prototype,n),r&&Yt(e,r),t}();function $t(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function te(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ee=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{value:"|"};$t(this,t),this.toJSON=d("value"),this.name="bar","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.value=e.value}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("bar",(function(t){e.value=t}))}},{key:"toString",value:function(){return this.value}}])&&te(e.prototype,n),r&&te(e,r),t}();function ne(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var re=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("sign","line"),this.name="clef","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.sign=e.sign,this.line=e.line)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return"clef(".concat(this.sign).concat(this.line,")")}}])&&ne(e.prototype,n),r&&ne(e,r),t}();function ie(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var oe=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("fifths","mode"),this.name="key","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.fifths=e.fifths,this.mode=e.mode)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){}},{key:"toString",value:function(){return"key(".concat(this.fifths).concat(this.mode,")")}}])&&ie(e.prototype,n),r&&ie(e,r),t}();function ae(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function se(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ue={bb:-2,b:-1,n:0,"":0,"#":1,"##":2},ce=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{data:[]};ae(this,t),this.toJSON=d("data","leftBar","rightBar"),this.name="cell","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.data=e.data.map((function(t){switch(t.name){case"time":return new K(t);case"note":return new Ft(t);case"rest":return new Gt(t);case"chord":return new Ut(t);case"multipart":return new _t(t);case"direction":return new Xt(t);case"bar":return new ee(t);case"clef":return new re(t);case"key":return new oe(t);default:throw new Error("Music data: ".concat(t))}})),this.setAlters(),this.setModifications(),this.linkTuplets(),this.extractBars()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.data=[];!t.eof;){if(t.is("time"))this.data.push(new K(t));else if(t.is("note"))this.data.push(new Ft(t));else if(t.is("rest"))this.data.push(new Gt(t));else if(t.is("chord"))this.data.push(new Ut(t));else if(t.is("multipart"))this.data.push(new _t(t));else if(t.is("direction"))this.data.push(new Xt(t));else if(t.is("bar")){if(this.data.push(new ee(t)),this.data.length>1){t.skipWhite();break}}else{if(t.is("==")||t.is("--"))break;t.error("music data in cell")}t.skipWhite()}}},{key:"setAlters",value:function(){var t={1:"",2:"",3:"",4:"",5:"",6:"",7:""},e=function(e){var n=e.step,r=e.accidental;r&&(t[n]=r),e.alter=ue[t[n]]};this.data.forEach((function(t){switch(t.name){case"note":return e(t.pitch);case"chord":return t.pitches.forEach(e);case"multipart":return}}))}},{key:"setModifications",value:function(){var t,e;this.data.forEach((function(n){var r=n.tuplet,i=n.duration;r&&"begin"===r.type&&(t=r.actual,e=r.normal),i&&t&&(i.modification={actual:t,normal:e}),r&&"end"===r.type&&(t=void 0,e=void 0)}))}},{key:"linkTuplets",value:function(){var t={};this.data.forEach((function(e){var n=e.tuplet;n&&("begin"===n.type?t=n:t.next=n)}))}},{key:"extractBars",value:function(){var t=this.data;t.length?(this.rightBar="bar"===a(t).name?t.pop():new ee("|"),this.leftBar=0===t.length||"bar"!==t[0].name?new ee("|"):t.shift()):(this.leftBar=new ee("|"),this.rightBar=new ee("|"))}},{key:"toString",value:function(){var t=[],e=[];return this.data.concat(this.rightBar).forEach((function(n){if("dummy"!==n.name){var r=n.duration;if(!r||r.type<8)return t.push(n);var i=r.beams;i.some((function(t){return"single"!==t.type}))?e.push(n):t.push(n),e.length>0&&!i.some((function(t){return"begin"===t.type||"continue"===t.type}))&&(t.push(e.join("")),e.length=0)}})),t.join(" ")}}])&&se(e.prototype,n),r&&se(e,r),t}();function fe(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var le={"@":"at","+":"forward","-":"backward"},he=p(le),ye=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("measureAmount","typeData","noteAmount"),this.name="lyric-control","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.instruction=e.instruction,this.measureAmount=e.measureAmount,this.typeData=e.typeData,this.noteAmount=e.noteAmount)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e=this;t.token("lyric-control-symbol",(function(t){e.instruction=le[t]})),t.is("digits")?(this.type="note",t.token("digits",(function(t){e.amount=+t}))):t.is("m")?(this.type="measure",t.token("m"),t.token("digits",(function(t){e.amount=+t}))):t.error("lyric-control parameters")}},{key:"toString",value:function(){var t=he[this.instruction];return"note"===this.type?t+=this.amount:"measure"===this.type&&(t+="m".concat(this.amount)),t}}])&&fe(e.prototype,n),r&&fe(e,r),t}();function pe(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var be=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d(),this.name="lyrics","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.list=e.list.map((function(t){return new Tt(t)})),this.list.forEach((function(t,e){"begin"!==t.syllabic&&"middle"!==t.syllabic||(t.next=n.list[e+1])}))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e,n;for(t.token("lyrics-head"),t.skipWhite(),this.list=[];(t.is("lyric")||t.is("lyric-control"))&&(t.is("lyric")?(e=new Tt(t,n),this.list.push(e),n=e):this.list.push(new ye(t)),t.skipWhite(),!t.is("lyrics-head")););}},{key:"toString",value:function(){}}])&&pe(e.prototype,n),r&&pe(e,r),t}();function de(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ve=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.name="dummy",Object.assign(this,e)}var e,n,r;return e=t,(n=[{key:"toString",value:function(){return"[[Dummy]]"}}])&&de(e.prototype,n),r&&de(e,r),t}();function me(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ge=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.toJSON=d("cells"),this.name="staff","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):this.cells=e.cells.map((function(t){return new ce(t)})),this.resetLeftBars(),this.setBeams(),this.linkTies(),this.linkSlurs(),this.setT(),this.lyricsLines&&this.placeLyrics()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){for(this.cells=[],t.is("--")&&(t.token("--"),t.skipSS(),t.eol||t.error("Unexpected token")),t.skipWhite();t.is("cell");)this.cells.push(new ce(t)),t.skipWhite();for(;t.is("lyrics-head");)this.lyricsLines=this.lyricsLines||[],this.lyricsLines.push(new be(t))}},{key:"resetLeftBars",value:function(){var t=this.cells;t.forEach((function(e,n){n>0&&(e.leftBar.value=t[n-1].rightBar.value)}))}},{key:"setBeams",value:function(){this.makeBeamGroups().forEach((function(t){t.forEach((function(e,n){e.duration.beams.forEach((function(e,r){var i=t[n-1]&&t[n-1].duration.beams[r],o=t[n+1]&&t[n+1].duration.beams[r];i&&o?e.type="continue":i?e.type="end":o&&(e.type="begin")}))})),t.forEach((function(e,n){e.duration.beams.forEach((function(e,r){if("begin"===e.type)for(var i=n+1;i<t.length;i++){var o=t[i].duration.beams[r];o&&"end"===o.type&&(e.endBeam=o)}}))}))}))}},{key:"makeBeamGroups",value:function(){var t=0,e=[];return this.cells.forEach((function(n){var r=function(){o.length&&(e.push(o),o=[])},i=0,o=[];n.data.forEach((function(e){if("time"===e.name)return t=we(e),i=0,void r();if(t&&e.duration){var n=e.duration,a=n.type,s=n.quartersQ;i+=s,a<8?(r(),i%=t):(i<=t&&o.push(e),i>=t&&(i=0,r()))}})),r()})),e}},{key:"linkTies",value:function(){var t=this;this.cells.forEach((function(e,n){e.data.forEach((function(r,i){if(r.tie){var o=r.tie.type;if("begin"===o||"continue"===o){var a=function(e,n){var r;do{var i=t.cells[e];if(n++,!(r=i.data[n])){if(e++,n=0,!(i=t.cells[e]))break;r=i.data[n]}if(r){if("note"===r.name||"chord"===r.name)return{ndt:r,ncell:i};if("rest"===r.name)break}}while(r);return{}}(n,i),s=a.ndt,u=a.ncell;if(!s||!Se(r,s))return;var c=function(t,n,r,i){t&&n&&(t.tie?"end"===t.tie.type&&(t.tie.type="continue"):t.tie=new mt({type:"begin"}),n.tie=new mt({type:n.tie?"continue":"end",cell:u}),t.tie.cell=e,t.tie.note=r,t.tie.nextNote=i,"pitch"===n.name&&(t.tie.nextPitch=n),t.tie.next=n.tie,n.tie.note=i,n.tie.prevNote=r,"pitch"===t.name&&(n.tie.prevPitch=t),n.tie.prev=t.tie,"pitch"===t.name&&"note"===n.name?(r.tie.cell=e,r.tie.note=r,r.tie.nextNote=i,r.tie.next=i.tie):"note"===t.name&&n.name)};switch(r.name){case"note":switch(s.name){case"note":c(r,s,r,s);break;case"chord":var f=ke(s.pitches,r.pitch);c(r,f,r,s)}break;case"chord":switch(s.name){case"note":var l=ke(r.pitches,s.pitch);c(l,s,r,s);break;case"chord":je(r.pitches,s.pitches).forEach((function(t){var e=t.curr,n=t.next;return c(e,n,r,s)})),c(r,s,r,s)}}}}}))}))}},{key:"linkSlurs",value:function(){var t=this;this.cells.forEach((function(e,n){e.data.forEach((function(r,i){if(r.beginSlurs)for(var o=Oe(t.cells,n,i),a=o(),s=a.ncell,u=a.ndt;u;){if(u.endSlurs){r.beginSlurs[0].cell=e,r.beginSlurs[0].nextNote=u,r.beginSlurs[0].next=u.endSlurs[0],u.endSlurs[0].cell=s,u.endSlurs[0].prevNote=r,u.endSlurs[0].prev=r.beginSlurs[0];break}var c=o();u=c.ndt,s=c.ncell}}))}))}},{key:"setT",value:function(){var t=0,e=0;this.cells.forEach((function(n){var r=0,i=0;n.data.forEach((function(n){n.t=t,n.tQ=e,n.tc=r,n.tcQ=i;var o=n.duration;if(o){var a=o.quarters*(60/90);o.seconds=a,t+=a,e+=o.quartersQ,r+=a,i+=o.quartersQ}}))}))}},{key:"placeLyrics",value:function(){var t=this;this.lyricsLines.forEach((function(e,n){for(var r=!1,i=!1,o=0;o<t.cells.length;o++)for(var a=t.cells[o],s=0;s<a.data.length;s++){var u=a.data[s];if(!u)break;if(!u.tie||"begin"===u.tie.type){var c=e.list[0];if(c&&"lyric-control"===c.name){var f=e.list.shift(),l=new ve({lyrics:[]});l.lyrics[n]=f,a.data.splice(s,0,l);var h=f.instruction,y=f.type,p=f.amount;if("at"===h){if("measure"===y){o=p-2;break}if("note"===y){s=p-1;continue}}else if("forward"===h){if("measure"===y){o+=p-1;break}if("note"===y){s+=p;continue}}else if("backward"===h){if("measure"===y){o-=p+1;break}if("note"===y){s-=p,i=!0;continue}}}if((!r||i)&&("note"===u.name||"chord"===u.name)){i=!1;var b=e.list.shift();b&&(u.lyrics=u.lyrics||[],u.lyrics[n]=b)}u.endSlurs&&(r=!1),u.beginSlurs&&(r=!0)}}})),delete this.lyricsLines}},{key:"toString",value:function(){var t=this.cells.join(" "),e=[[]];this.cells.forEach((function(t){t.data.forEach((function(t){t.lyrics&&t.lyrics.forEach((function(t,n){e[n]=e[n]||[],e[n].push(t)}))}))}));var n=e.map((function(t){return t.join(" ")})),r=[t];return n.forEach((function(t){t&&r.push("lyrics: "+t)})),r.join("\n\n")}}])&&me(e.prototype,n),r&&me(e,r),t}(),we=function(t){var e=t.beats,n=t.beatType;return 8===n?e%3==0?1.5*V:.5*V:V/n*4},Oe=function(t,e,n){return function(){for(var r,i;!i;)if(r=t[e],n++,!(i=r.data[n])){if(e++,n=0,!(r=t[e]))break;i=r.data[n]}return{ncell:r,ndt:i}}},Se=function(t,e){switch(t.name){case"note":switch(e.name){case"note":return e.pitch.midiNumber===t.pitch.midiNumber;case"chord":return e.pitches.some((function(e){return e.midiNumber===t.pitch.midiNumber}))}case"chord":switch(e.name){case"note":return t.pitches.some((function(t){return t.midiNumber===e.pitch.midiNumber}));case"chord":return t.pitches.some((function(t,n){return e.pitches.some((function(e){return t.midiNumber===e.midiNumber}))}))}}},ke=function(t,e){for(var n=0;n<t.length;n++)if(t[n].midiNumber===e.midiNumber)return t[n]},je=function(t,e){var n=[];return t.forEach((function(t){e.forEach((function(e){t.midiNumber===e.midiNumber&&n.push({curr:t,next:e})}))})),n};function xe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Le(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Pe=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{staves:[]};xe(this,t),this.toJSON=d("head","staves"),this.name="part","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(this.head=new I(e.head),this.staves=e.staves.map((function(t){return new ge(t)})))}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){this.head=t.is("part-head")?new I(t):new I,this.staves=[],t.skipWhite();do{this.staves.push(new ge(t))}while(t.is("--"));t.skipWhite()}},{key:"stavesStr",value:function(){return this.staves.join("\n\n--\n")}},{key:"singlePartToString",value:function(){return""+this.head=="=="?this.stavesStr():this.toString()}},{key:"toString",value:function(){return this.head+"\n"+this.stavesStr()}},{key:"isEmpty",get:function(){return 1===this.staves.length&&0===this.staves[0].cells.length}}])&&Le(e.prototype,n),r&&Le(e,r),t}();function Ee(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ae(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var De=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};Ee(this,t),this.toJSON=d("parts","leftBar","rightBar"),this.name="measure",this.parts=e.parts,this.cells=this.mapCell((function(t){return t})),this.partIndices=this.mapCell((function(t,e,n,r){return r})),this.setPartsToCellsIndices()}var e,n,r;return e=t,(n=[{key:"setPartsToCellsIndices",value:function(){var t=this;this.partsToCellsIndices=f(this.parts.length).map((function(){return[]})),this.eachCell((function(e,n,r,i){return t.partsToCellsIndices[i].push(n)}))}},{key:"eachCell",value:function(t){var e=0;this.parts.forEach((function(n,r){n.staves.forEach((function(n,i){t(n,e,i,r),e++}))}))}},{key:"mapCell",value:function(t){var e=[];return this.eachCell((function(n,r,i,o){return e.push(t(n,r,i,o))})),e}}])&&Ae(e.prototype,n),r&&Ae(e,r),t}();function Re(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Te(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Ne=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{parts:[]};Re(this,t),this.toJSON=d("parts","measures"),this.name="body","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new F(e)):(e.parts||(e.parts=[]),this.parts=e.parts.map((function(t){return new Pe(t)}))),this.fillStaves(),this.makeMeasures()}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){var e;this.parts=[];do{(e=new Pe(t)).isEmpty||this.parts.push(e)}while(t.is("part-head"))}},{key:"eachStaff",value:function(t){this.parts.forEach((function(e,n){e.staves.forEach((function(e,r){return t(e,r,n)}))}))}},{key:"mapStaff",value:function(t){var e=[];return this.eachStaff((function(n,r,i){return e.push(t(n,r,i))})),e}},{key:"fillStaves",value:function(){var t=Math.max.apply(null,this.mapStaff((function(t){return t.cells.length})));t<=0||this.eachStaff((function(e){if(e.cells.length!==t){var n=t-e.cells.length;e.cells=e.cells.concat(f(n).map((function(){return new ce})))}}))}},{key:"makeMeasures",value:function(){if(this.parts.length){var t=this.parts[0].staves[0].cells.length,e=f(t).map((function(){return{parts:[]}}));this.eachStaff((function(t,n,r){e.forEach((function(e,i){e.parts[r]=e.parts[r]||{};var o=e.parts[r];o.staves=o.staves||[],o.staves[n]=t.cells[i]}))})),this.measures=e.map((function(t){return new De(t)}))}else this.measures=[]}},{key:"toString",value:function(){return 1===this.parts.length?this.parts[0].singlePartToString():this.parts.join("\n\n")}}])&&Te(e.prototype,n),r&&Te(e,r),t}();function Ce(t){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ze(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Be(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Me(t,e,n){return e&&Be(t.prototype,e),n&&Be(t,n),t}var Fe,Qe=D({"<":"<",">":">","</":"<\\/","/>":"\\/>","=":"=",'"':'"',"<?xml":"<\\?xml","?>":"\\?>","<!Doctype":"<![Dd][Oo][Cc][Tt][Yy][Pp][Ee]","\x3c!--":"\x3c!--","--\x3e":"--\x3e",name:"[a-z_-]+"}),Ge=function(){function t(e){ze(this,t),this.toJSON=d("xmlDecl","doctype","root"),this.name="document","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Qe(e)):(e.xmlDecl&&(this.xmlDecl=new We(e.xmlDecl)),e.doctype&&(this.doctype=new Je(e.doctype)),this.root=new qe(e.root))}return Me(t,[{key:"parse",value:function(t){for(t.skipWhite(),t.is("<?xml")&&(this.xmlDecl=new We(t)),t.is("<!Doctype")&&(this.doctype=new Je(t));!t.eof;)t.is("\x3c!--")?new Ve(t):this.root=new qe(t)}},{key:"toString",value:function(){var t=[];return this.xmlDecl&&t.push(this.xmlDecl),this.doctype&&t.push(this.doctype),t.push(this.root),t.join("\n")}}]),t}(),We=function(){function t(e){ze(this,t),this.toJSON=d("attrs"),this.name="xml-decl","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Qe(e)):this.attrs=new Ie(e.attrs)}return Me(t,[{key:"parse",value:function(t){t.token("<?xml"),t.skipWhite(),this.attrs=new Ie(t),t.token("?>"),t.skipWhite()}},{key:"toString",value:function(){return"<?xml ".concat(this.attrs,"?>")}}]),t}(),Je=function(){function t(e){ze(this,t),this.toJSON=d("value"),this.name="doctype","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Qe(e)):this.value=e.value}return Me(t,[{key:"parse",value:function(t){var e=this;t.token("<!Doctype"),t.mlwithout(">",(function(t){e.value=t.trim()})),t.token(">"),t.skipWhite()}},{key:"toString",value:function(){return"<!Doctype ".concat(this.value,">")}}]),t}(),qe=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;if(ze(this,t),this.toJSON=d("elName","attrs","content"),this.name="element",this.level=r,this.indent=i,"lexer"===e.name)this.parse(e);else if("string"==typeof e)this.parse(new Qe(e));else{var o=e.elName,a=e.attrs,s=e.content;this.elName=o,this.attrs=new Ie(a),this.content=[],Array.isArray(s)?s.forEach((function(e){n.content.push(new t(e,r+1,i))})):this.content=s}}return Me(t,[{key:"parse",value:function(e){var n=this;if(this.content=[],e.token("<"),e.token("name",(function(t){n.elName=t})),e.skipWhite(),this.attrs=new Ie(e),e.is("/>"))e.token("/>");else{for(e.token(">"),e.skipWhite();!e.eof;){if(e.is("</")){0===this.content.length&&(this.content="");break}e.is("\x3c!--")?new Ve(e):e.is("<")?this.content.push(new t(e,this.level+1,this.indent)):e.mlwithout("<",(function(t){n.content=t.trim()})),e.skipWhite()}e.token("</"),e.skipWhite(),e.token("name",(function(t){n.elName!==t&&e.error("tagname mismatched")})),e.skipWhite(),e.token(">"),e.skipWhite()}}},{key:"eachChild",value:function(t){var e=this.content;if(!Array.isArray(e))return t(e,0);e.forEach(t)}},{key:"mapChild",value:function(t){var e=[];return this.eachChild((function(n,r){return e.push(t(n,r))})),e}},{key:"actContent",value:function(t){if(void 0!==this.content)return"string"==typeof this.content?t(this.content):void this.content.forEach((function(e){"element"===e.name&&t[e.elName]&&t[e.elName](e)}))}},{key:"eachAttr",value:function(t){return this.attrs.each(t)}},{key:"mapAttr",value:function(t){return this.attrs.map(t)}},{key:"getAttr",value:function(t){if(this.attrs)return this.attrs.getAttr(t)}},{key:"actAttrs",value:function(t){this.attrs&&this.attrs.act(t)}},{key:"toString",value:function(){var t=this.level,e=this.indent,n=this.elName,r=this.attrs,i=this.content,a=[];return t>0&&a.push("\n"+o(" ",t*e)),a.push("<".concat(n)),r.hasAttr&&a.push(" "+r),Array.isArray(i)?0===i.length?a.push("/>"):(a.push(">",i.join("")),a.push("\n",o(" ",t*e),"</".concat(n,">"))):a.push(">".concat(i,"</").concat(n,">")),a.join("")}},{key:"hasAttr",get:function(){return this.attrs.hasAttr}}]),t}(),Ie=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ze(this,t),this.toJSON=d("value"),this.name="attrs","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Qe(e)):this.value=e}return Me(t,[{key:"parse",value:function(t){var e,n=this;for(this.value={};t.is("name");)t.token("name",(function(t){e=t})),t.skipWhite(),t.token("="),t.skipWhite(),t.token('"'),t.without('"',(function(t){n.value[e]=t})),t.token('"'),t.skipWhite();t.skipWhite()}},{key:"getAttr",value:function(t){return this.value[t]}},{key:"setAttr",value:function(t,e){this.value[t]=value}},{key:"act",value:function(t){for(var e in this.value)t[e]&&t[e](this.value[e])}},{key:"each",value:function(t){var e=this.value;Object.keys(e).forEach((function(n,r){return t(e[n],n,r)}))}},{key:"map",value:function(t){var e=[];return this.each((function(n,r){return e.push(t(n,r))})),e}},{key:"toString",value:function(){var t=[];for(var e in this.value)t.push("".concat(e,'="').concat(this.value[e],'"'));return t.join(" ")}},{key:"hasAttr",get:function(){return Object.keys(this.value).length>0}}]),t}(),Ve=function(){function t(e){ze(this,t),this.toJSON=d("value"),this.name="comment","lexer"===e.name?this.parse(e):"string"==typeof e?this.parse(new Qe(e)):this.value=e.value}return Me(t,[{key:"parse",value:function(t){var e=this;t.token("\x3c!--"),t.mlwithout("--\x3e",(function(t){e.value=t})),t.token("--\x3e"),t.skipWhite()}},{key:"toString",value:function(){return"\x3c!--".concat(this.value,"--\x3e")}}]),t}(),Ue=function(t,e,n){return(Array.isArray(e)||"object"!==Ce(e))&&(n=e,e={}),Array.isArray(n)&&(n=i(n)),{name:"element",elName:t,attrs:e,content:n}},Ke={C:1,D:2,E:3,F:4,G:5,A:6,B:7},Xe={"-2":"bb","-1":"b",0:"n",1:"#",2:"##"},He=h([1,2,4,8,16,32,64,128,256,512,1024]),Ze={maxima:.125,long:.25,breve:.5,whole:1,half:2,quarter:4,eighth:8,"16th":16,"32nd":32,"64th":64,"128th":128,"256th":256,"512th":512,"1024th":1024};var Ye=function(t,e){t.actContent({"credit-words":function(t){switch(t.getAttr("justify")){case"center":e.title=e.title||t.content;break;case"right":e.composer=e.composer||t.content;break;case"left":e.lyricist=e.lyricist||t.content}}})},_e=function(t){var e=[];return t.actContent({"score-part":function(t){var n={name:"part",head:{name:"part-head"}};t.actContent({"part-name":function(t){n.head.partName=t.content},"part-abbreviation":function(t){n.head.abbreviation=t.content},"midi-instrument":function(t){var e=n.head.midi={};t.actContent({"midi-channel":function(t){e.channel=+t.content},"midi-program":function(t){e.program=+t.content},volume:function(t){e.volume=+t.content},pan:function(t){e.pan=+t.content}})}}),e.push(n)}}),e},$e=function(t,e){var n,r,i=function(){return e.staves.forEach((function(t){return t.cells.push({name:"cell",data:[]})}))},o=function(){return e.staves.map((function(t){return a(t.cells)}))};return e.staves=[{name:"staff",cells:[]}],t.actContent({measure:function(t){i();var s,u=o();t.actContent({attributes:function(t){(n=nn(t)).divisions&&(Fe=n.divisions),n.staves>1&&(e.staves=function(t){for(var e=[],n=0;n<t;n++)e.push({name:"staff",cells:[]});return e}(n.staves),i(),u=o()),n.clefs&&u.forEach((function(t,e){return t.data.push(n.clefs[e])})),n.key&&u.forEach((function(t){return t.data.push(n.key)})),n.time&&u.forEach((function(t){return t.data.push(n.time)}))},direction:function(t){var e=t.getAttr("placement");e?r=e:e=r;var n=function(t){return Object.assign({name:"direction",placement:e},t)};t.actContent({"direction-type":function(t){return t.actContent({words:function(t){u[0].data.push(n({words:t.content}))},wedge:function(t){u[0].data.push(n({wedge:t.getAttr("type")}))},dynamics:function(t){u[0].data.push(n({dynamics:t.content[0].elName}))}})}})},note:function(t){var e=sn(t),n=u[e.staff];e.chord&&e.staff===s&&n.data.length?hn(a(n.data),e):n.data.push(e),s=e.staff,delete e.staff},barline:function(t){return u.forEach((function(e){return e.data.push(tn(t))}))}}),u.forEach((function(t){en(t);var e=a(t.data);e&&"bar"===e.name||t.data.push({name:"bar",value:"|"})}))}}),e},tn=function(t){var e={name:"bar",value:"|"};return t.actContent({"bar-style":function(t){switch(t.content){case"light-heavy":return void(e.value="|]");case"light-light":return void(e.value="||")}},repeat:function(t){switch(t.getAttr("direction")){case"forward":return void(e.value="|:");case"backward":return void(e.value=":|")}}}),e},en=function(t){var e,n=function(t){"alter"in t&&t.alter!==r[t.step]&&(t.accidental=Xe[t.alter],e[t.step]=t.alter)},r={1:0,2:0,3:0,4:0,5:0,6:0,7:0};t.data.forEach((function(t){switch(e={},t.name){case"note":n(t.pitch);break;case"chord":t.pitches.forEach(n)}Object.assign(r,e)}))},nn=function(t){var e={};return t.actContent({divisions:function(t){e.divisions=+t.content},clef:function(t){e.clefs=e.clefs||[],e.clefs.push(rn(t))},key:function(t){e.key=on(t)},time:function(t){e.time=an(t)},staves:function(t){e.staves=+t.content}}),e},rn=function(t){var e={name:"clef"};return t.actContent({sign:function(t){e.sign=t.content},line:function(t){e.line=+t.content}}),e},on=function(t){var e={name:"key"};return t.actContent({fifths:function(t){e.fifths=+t.content},mode:function(t){e.mode=t.content}}),e},an=function(t){var e={name:"time"};return t.actContent({beats:function(t){e.beats=+t.content},"beat-type":function(t){e.beatType=+t.content}}),e},sn=function(t){var e={name:"note",duration:{name:"duration",dot:0},staff:0},n=e.duration;return t.actContent({rest:function(){e.name="rest"},chord:function(){e.chord=!0},pitch:function(t){e.pitch=yn(t)},duration:function(t){return Object.assign(n,ln(t))},type:function(t){n.type||(n.type=Ze[t.content])},"time-modification":function(t){n.modification=fn(t)},notations:function(t){return t.actContent({articulations:function(t){e.articulations=un(t)},slur:function(t){e.slurs=e.slurs||[],e.slurs.push({type:t.getAttr("type")})},tuplet:function(t){return e.tuplet={type:t.getAttr("type")}}})},tie:function(t){"start"===t.getAttr("type")&&(e.duration.tie=!0)},lyric:function(t){e.lyrics=e.lyrics||[],e.lyrics.push(cn(t))},staff:function(t){e.staff=t.content-1}}),e},un=function(t){var e=[];return t.actContent({staccato:function(t){return e.push(t.elName)}}),e},cn=function(t){var e={};return t.actContent({syllabic:function(t){return e.syllabic=t.content},text:function(t){return e.text=t.content}}),e},fn=function(t){var e={};return t.actContent({"actual-notes":function(t){e.actual=+t.content},"normal-notes":function(t){e.normal=+t.content}}),e},ln=function(t){var e=4/(+t.content/Fe);return He[e]?{type:e}:He[e*=1.5]?{type:e,dot:1}:He[e*=1.75]?{type:e,dot:2}:void 0},hn=function(t,e){"note"===t.name&&(t.name="chord",t.pitches=[t.pitch],delete t.pitch),t.pitches.push(e.pitch)},yn=function(t){var e={name:"pitch",accidental:""};return t.actContent({step:function(t){e.step=Ke[t.content]},alter:function(t){e.alter=+t.content},octave:function(t){e.octave=t.content-4}}),e},pn={1:"C",2:"D",3:"E",4:"F",5:"G",6:"A",7:"B"},bn=function(){var t,e=this.head,n=(this.body,e.title),r=e.composer;return new Ge({xmlDecl:{attrs:{version:"1.0",encoding:"UTF-8",standalone:"no"}},doctype:{value:'score-partwise PUBLIC\n    "-//Recordare//DTD MusicXML 3.1 Partwise//EN"\n    "http://www.musicxml.org/dtds/partwise.dtd"'},root:Ue("score-partwise",{version:"3.1"},[n?Ue("movement-title",n):[],Ue("identification",[r?Ue("creator",{type:"composer"},r):[]]),Ue("part-list",[Ue("score-part",{id:"P1"},[Ue("part-name","Music")])]),Ue("part",{id:"P1"},[Ue("measure",{number:1},[Ue("attributes",[Ue("divisions",1),Ue("key"),Ue("time"),Ue("clef")]),Ue("note",[(t={step:2,alter:1,octave:1},Ue("pitch",[Ue("step",pn[t.step]),Ue("alter",t.alter),Ue("octave",t.octave+4)])),Ue("duration",4),Ue("type","whole")])])])])}).toString()},dn=[];function vn(){var t=this.obj,e=this.context;switch(t.name){case"score":xn(t,e);break;case"part":Ln(t,e);break;case"staff":Pn(t,e);break;case"cell":En(t,e);break;case"note":An(t,e)}}function mn(){}function gn(){dn.forEach(clearTimeout),dn.length=0}var wn=function(t,e,n,r,i){var o=i.currentTime,a=i.createGain();a.connect(i.destination),a.gain.setValueAtTime(0,t+o),a.gain.linearRampToValueAtTime(.5,t+o+.05),a.gain.linearRampToValueAtTime(.5,t+o+n-.05),a.gain.linearRampToValueAtTime(0,t+o+n-.01);var s=i.createOscillator();s.frequency.value=e,s.connect(a),s.start(o+t),s.stop(o+t+n),r&&(s.onended=r)},On=function(t){var e=t.dt,n=t.pitch,r=[{dt:e,pitch:n}],i=function(){var t=(n||e).tie;e=t.nextNote,n=t.nextPitch};for(i();e;)r.push({dt:e,pitch:n}),i();return r},Sn=function(t,e,n){e.forEach((function(t){var e=t.dt,n=t.pitch;n?n.onplay():e.onplay()}));var r=c(e.map((function(t){var e=t.dt;return jn(e)})));wn(0,t.frequency,r,(function(){return e.forEach((function(t){var e=t.dt,n=t.pitch;n?n.onstop():e.onstop()}))}),n)},kn=function(t){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onplay()}));var e=c(t.map((function(t){var e=t.dt;return jn(e)})));setTimeout((function(){t.forEach((function(t){var e=t.dt;"chord"===e.name&&e.onstop()}))}),1e3*e)},jn=function(t){return t.duration.seconds},xn=function(t,e){t.body.parts.forEach((function(t){return Ln(t,e)}))},Ln=function(t,e){t.staves.forEach((function(t){return Pn(t,e)}))},Pn=function(t,e){t.cells.forEach((function(t){t.data.forEach((function(t){switch(t.name){case"note":return An(t,e);case"chord":return Dn(t,e)}}))}))},En=function(t,e){t.data.forEach((function(t){switch(t.name){case"note":An(t,e);break;case"rest":break;case"chord":Dn(t,e)}}))},An=function(t,e){var n=t.pitch;t.duration;dn.push(setTimeout((function(){var r=t.tie;if(r){if("begin"!==r.type)return;var i=On({dt:t});Sn(n,i,e),kn(i)}else{t.onplay();var o=jn(t);wn(0,n.frequency,o,(function(){return t.onstop()}),e)}}),1e3*t.t))},Dn=function(t,e){var n=jn(t);dn.push(setTimeout((function(){if(t.tie&&"begin"===t.tie.type){var r=On({dt:t});kn(r)}else t.onplay(),setTimeout((function(){return t.onstop()}),1e3*jn(t));t.pitches.forEach((function(r){if(r.tie){if("begin"!==r.tie.type)return;var i=On({dt:t,pitch:r});Sn(r,i,e)}else r.onplay(),wn(0,r.frequency,n,(function(){return r.onstop()}),e)}))}),1e3*t.t))};function Rn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Tn,Nn=window.AudioContext||window.webkitAudioContext,Cn=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.play=vn,this.pause=mn,this.stop=gn,this.obj=e}var e,n,r;return e=t,(n=[{key:"context",get:function(){return Tn||(Tn=new Nn)}}])&&Rn(e.prototype,n),r&&Rn(e,r),t}();function zn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Bn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Mn(t,e,n){return e&&Bn(t.prototype,e),n&&Bn(t,n),t}var Fn=function(t){var e=t.split("-");return e.shift()+e.map((function(t){return t[0].toUpperCase()+t.substr(1)})).join("")},Qn=D({names:"[a-zA-Z\\d\\-, ]+",name:"[a-z\\-]+",string:"[a-zA-Z][a-zA-z\\d ]+",number:"[\\d\\.]+",unit:"(%|px)","{":"{",":":":","}":"}"}),Gn=function(){function t(e,n,r){zn(this,t),this.value=e,this.unit=n,this.factors=r}return Mn(t,[{key:"pxValue",get:function(){return"px"===this.unit?this.value:this.value*this.factors.baseSize/100}}]),t}(),Wn=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};zn(this,t),this.name="style",this.factors=n,this.rawValue={},this.parse(new Qn(e))}return Mn(t,[{key:"parse",value:function(t){var e,n=this;t.skipWhite();for(var r=function(){t.token("names",(function(t){e=t.replace(/ +/g,"").split(",").map(Fn)})),e.forEach((function(t){n.rawValue[t]=n.rawValue[t]||{}})),t.skipSS(),t.token("{"),t.nextLine();var r=void 0;do{(r=n.getNameValue(t))&&e.forEach((function(t){n.rawValue[t][r.name]=r.value}))}while(r);t.token("}"),t.skipWhite()};!t.eof;)r()}},{key:"getNameValue",value:function(t){var e,n,r;if(t.skipSS(),t.is("name"))return t.token("name",(function(t){e=Fn(t)})),t.skipSS(),t.token(":"),t.skipSS(),t.is("string")?t.token("string",(function(t){n=t.trim(),/ /.test(n)&&(n='"'.concat(n,'"'))})):t.is("number")&&(t.token("number",(function(t){n=+t})),t.optional("unit",(function(t){r=t})),r&&(n=new Gn(n,r,this.factors))),t.skipSS(),t.eof||t.nextLine(),{name:e,value:n}}},{key:"add",value:function(e){var n=this,r=new t(e,this.factors).rawValue;Object.keys(r).forEach((function(t){var e=r[t];Object.assign(n.rawValue[t],e)}))}},{key:"value",get:function(){var t=this.rawValue;this.factors.baseSize=t.base.size.pxValue;var e=function(t){return t instanceof Gn?t.pxValue:t},n={};for(var r in t){n[r]={};var i=t[r].size;for(var o in i&&(i=i.pxValue),t[r])switch(o){case"widthRatio":n[r].width=e(t[r][o]*i);break;case"heightRatio":n[r].height=e(t[r][o]*i);break;case"dxRatio":n[r].dx=e(t[r][o]*i);break;case"dyRatio":n[r].dy=e(t[r][o]*i);break;default:n[r][o]=e(t[r][o])}}return n}}]),t}(),Jn="base {\r\n  size: 18px\r\n}\r\n\r\ntitle-font {\r\n  family: Times New Roman\r\n  size: 120%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\nsubtitle-font {\r\n  family: Times New Roman\r\n  size: 110%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\ncreator-font {\r\n  family: Times New Roman\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\npart-name-font {\r\n  family: Times New Roman\r\n  size: 80%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.8\r\n}\r\ntime-font {\r\n  family: Cadence\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.52\r\n  dy-ratio: 0.51\r\n}\r\nstep-font, rest-font {\r\n  family: Times New Roman\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.69\r\n  dy-ratio: 0.68\r\n}\r\naccidental-font {\r\n  family: Cadence\r\n  size: 90%\r\n  width-ratio: 0.3\r\n  height-ratio: 0.75\r\n  dx-ratio: 0.3\r\n  dy-ratio: 0.39\r\n  lift: 25%\r\n}\r\ntuplet-font {\r\n  family: Times New Roman\r\n  size: 90%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\ndirection-font {\r\n  family: Times New Roman\r\n  size: 70%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.5\r\n}\r\ndynamics-font {\r\n  family: Cadence\r\n  size: 100%\r\n  width-ratio: 0.45\r\n  height-ratio: 0.52\r\n  dy-ratio: 0.51\r\n}\r\nlyrics-font {\r\n  family: Times New Roman\r\n  size: 90%\r\n  height-ratio: 0.9\r\n  dy-ratio: 0.75\r\n}\r\n\r\nscore {\r\n  width: 450px\r\n  margin-left: 20px\r\n  margin-top: 20px\r\n  margin-right: 20px\r\n  margin-bottom: 20px\r\n  head-body-sep: 20px\r\n}\r\n\r\nhead {\r\n  title-subtitle-sep: 70%\r\n  title-creator-sep: 75%\r\n  creators-sep: 30%\r\n}\r\n\r\nbody {\r\n  systems-sep: 200%\r\n}\r\n\r\nsystem {\r\n  align: justify  // left|justify|equal\r\n  staves-sep: 100%\r\n  part-name-padding-right: 30%\r\n}\r\n\r\nsystem-head {\r\n  braced-staves: Piano, test\r\n  brace-padding-right: 10%\r\n  brace-width: 30%\r\n  brace-stroke-width: 10%\r\n}\r\n\r\ncell {\r\n  padding-left: 60%\r\n  padding-right: 60%\r\n  data-sep: 30%\r\n  data-direction-sep: 30%\r\n}\r\n\r\nbar {\r\n  line-height: 100%\r\n  light-width: 5%\r\n  heavy-width: 15%\r\n  dot-size: 12%\r\n  lines-sep: 15%\r\n  dots-sep: 20%\r\n  line-dot-sep: 12%\r\n}\r\n\r\ntime {\r\n  line-height: 6%\r\n  line-ext: 5%\r\n  line-number-sep: 5%\r\n}\r\n\r\nnote {\r\n  pitch-beam-sep: 9%\r\n  pitch-line-sep: 60%\r\n  pitch-dot-sep: 6%\r\n}\r\n\r\nchord {\r\n  pitches-sep: 10%\r\n  tie-mode: single  // single|multiple\r\n}\r\n\r\nnote, chord {\r\n  pitch-tuplet-sep: 30%\r\n  data-lyric-sep: 50%\r\n  lyrics-v-sep: 50%\r\n  lyrics-h-sep: 50%\r\n}\r\n\r\ndirection {\r\n  tmp: 0\r\n}\r\n\r\npitch {\r\n  step-accidental-sep: 0%\r\n  step-octave-sep: 7%\r\n  octave-size: 12%\r\n  octaves-sep: 6%\r\n}\r\n\r\ndurationGE4 {\r\n  beam-height: 5%\r\n  beams-sep: 10%\r\n  dot-lift: 6%\r\n  dot-size: 12%\r\n  dots-sep: 10%\r\n}\r\n\r\ndurationLE2 {\r\n  line-width: 50%\r\n  line-height: 6%\r\n  lines-sep: 60%\r\n  line-dot-sep: 60%\r\n  dot-size: 12%\r\n  dots-sep: 60%\r\n}\r\n\r\ntie {\r\n  lift: 70%\r\n  stroke-width: 9%\r\n}\r\n\r\nslur {\r\n  lift: 70%\r\n  stroke-width: 9%\r\n}\r\n\r\ntuplet {\r\n  lift: 30%\r\n  stroke-width: 5%\r\n}\r\n";function qn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var In=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,r;return e=t,(n=[{key:"toJSON",value:function(){return{name:this.name,x:this.x,y:this.y,width:this.width,height:this.height,x2:this.x2,y2:this.y2,cx:this.cx,cy:this.cy,bx:this.bx,by:this.by,dx:this.dx,dy:this.dy}}},{key:"x1",set:function(t){this.x=t},get:function(){return this.x}},{key:"y1",set:function(t){this.y=t},get:function(){return this.y}},{key:"x2",set:function(t){this.x=t-this.width},get:function(){return this.x+this.width}},{key:"y2",set:function(t){this.y=t-this.height},get:function(){return this.y+this.height}},{key:"cx",set:function(t){this.x=t-this.width/2},get:function(){return this.x+this.width/2}},{key:"cy",set:function(t){this.y=t-this.height/2},get:function(){return this.y+this.height/2}},{key:"dx2",set:function(t){this.dx=this.width-t},get:function(){return this.width-this.dx}},{key:"dy2",set:function(t){this.dy=this.height-t},get:function(){return this.height-this.dy}},{key:"bx",set:function(t){this.x=t-this.dx},get:function(){return this.x+this.dx}},{key:"by",set:function(t){this.y=t-this.dy},get:function(){return this.y+this.dy}},{key:"position",set:function(t){Object.assign(this,t)}},{key:"wh",get:function(){return{width:this.width,height:this.height}}},{key:"xy",get:function(){return{x:this.x,y:this.y}}},{key:"xby",get:function(){return{x:this.x,y:this.by}}},{key:"cxby",get:function(){return{x:this.cx,y:this.by}}},{key:"x2by",get:function(){return{x:this.x2,y:this.by}}},{key:"x2cy",get:function(){return{x:this.x2,y:this.cy}}},{key:"cxcy",get:function(){return{x:this.cx,y:this.cy}}},{key:"rect",get:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},{key:"circle",get:function(){return{cx:this.cx,cy:this.cy,r:this.r}}}])&&qn(e.prototype,n),r&&qn(e,r),t}();function Vn(t){return(Vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Un(t){return(Un=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Kn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Xn(t,e){return(Xn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Hn=function(t){function e(t,n){var r,i,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i=this,(r=!(o=Un(e).call(this))||"object"!==Vn(o)&&"function"!=typeof o?Kn(i):o).name="text-layout",r.text=t,Object.assign(Kn(r),n),r.width=w(n,t).width,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xn(t,e)}(e,t),e}(In);function Zn(t){return(Zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Yn(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function _n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function $n(t,e){return!e||"object"!==Zn(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function tr(t,e,n){return(tr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=rr(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function er(t,e,n,r){return(er="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=rr(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else nr(r,e,n);return!0})(t,e,n,r)}function nr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function rr(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ir(t)););return t}function ir(t){return(ir=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function or(t,e){return(or=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ar=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=$n(this,ir(e).call(this))).name="head-layout",r.head=t,r.style=n;var i=t.title,o=t.subtitle,a=t.composer,s=(t.arranger,t.lyricist);return i&&(r.titleLayout=new Hn(i,r.style.titleFont)),o&&(r.subtitleLayout=new Hn(o,r.style.subtitleFont)),a&&(r.composerLayout=new Hn(a,r.style.creatorFont)),s&&(r.lyricistLayout=new Hn(s,r.style.creatorFont)),r.setSize(),r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&or(t,e)}(e,t),n=e,(r=[{key:"setSize",value:function(){var t=this.head,e=t.title,n=t.subtitle,r=t.composer,i=t.lyricist,o=this.style.score,a=o.width,s=o.marginLeft,u=o.marginRight,c=this.style.head,f=c.titleSubtitleSep,l=c.titleCreatorSep,h=c.creatorsSep,y=0;e&&(y+=this.titleLayout.height),e&&n&&(y+=f),n&&(y+=this.subtitleLayout.height),(e||n)&&(r||i)&&(y+=l),r&&(y+=this.composerLayout.height),r&&i&&(y+=h),i&&(y+=this.lyricistLayout.height),this.width=a-s-u,this.height=y}},{key:"toJSON",value:function(){var t=this.titleLayout,n=this.subtitleLayout,r=this.composerLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Yn(Object(n),!0).forEach((function(e){nr(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Yn(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},tr(ir(e.prototype),"toJSON",this).call(this),{titleLayout:t,subtitleLayout:n,composerLayout:r})}},{key:"position",set:function(t){var n=this.head,r=n.title,i=n.subtitle,o=n.composer,a=n.lyricist,s=this.style.head,u=s.titleSubtitleSep,c=s.titleCreatorSep,f=s.creatorsSep;!function(t,e,n,r,i){if(!er(t,e,n,r||t)&&i)throw new Error("failed to set property")}(ir(e.prototype),"position",t,this,!0);var l=this.cx,h=this.x2,y=this.y,p=y;r&&(this.titleLayout.position={cx:l,y:y},p=this.titleLayout.y2),i&&(this.subtitleLayout.position={cx:l,y:r?p+u:y},p=this.subtitleLayout.y2),o&&(this.composerLayout.position={x2:h,y:p>y?p+c:y},p=this.composerLayout.y2),a&&(this.lyricistLayout.position={x2:h,y:o?p+f:r||i?p+c:y})}}])&&_n(n.prototype,r),i&&_n(n,i),e}(In);function sr(t){return(sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ur(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function cr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function lr(t,e){return!e||"object"!==sr(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function hr(t,e,n){return(hr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=br(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function yr(t,e,n,r){return(yr="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=br(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else pr(r,e,n);return!0})(t,e,n,r)}function pr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function br(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=dr(t)););return t}function dr(t){return(dr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function vr(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&mr(t,e)}function mr(t,e){return(mr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var gr=function(t){function e(t,n){var r;return cr(this,e),(r=lr(this,dr(e).call(this))).name="system-head-layout",r.head=t,r.style=n,r.setBracesLayouts(),r.partNamesLayouts=t.partHeads.map((function(e){var r="full"===t.nameType?e.partName:e.abbreviation;return new Hn(r,n.partNameFont)})),r.setWidth(),r}var n,r,i;return vr(e,t),n=e,(r=[{key:"setBracesLayouts",value:function(){var t=this,e=this.head,n=e.partHeads,r=e.partsToCellsIndices;r&&r.forEach((function(e,r){if("Piano"===n[r].partName&&e.length>=2){t.bracesLayouts=t.bracesLayouts||[];var i=new wr(t.style);i.cs=[e[0],a(e)],t.bracesLayouts.push(i)}}))}},{key:"setWidth",value:function(){var t=this.style.system.partNamePaddingRight;if(this.width=u(this.partNamesLayouts.map((function(t){return t.width}))),this.width&&(this.width+=t),this.bracesLayouts){var e=this.style.systemHead,n=e.bracePaddingRight,r=e.braceWidth;this.width+=n+r}}},{key:"setBracesHeight",value:function(){var t=this;this.bracesLayouts.forEach((function(e){var n=e.cs;e.height=t.staves.by0s[n[1]]-t.staves.by0s[n[0]]+t.style.bar.lineHeight,e.by0=t.staves.by0s[n[1]]}))}},{key:"toJSON",value:function(){var t=this.partNamesLayouts,n=this.bracesLayouts;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ur(Object(n),!0).forEach((function(e){pr(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ur(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},hr(dr(e.prototype),"toJSON",this).call(this),{partNamesLayouts:t,bracesLayouts:n})}},{key:"position",set:function(t){var n=this;!function(t,e,n,r,i){if(!yr(t,e,n,r||t)&&i)throw new Error("failed to set property")}(dr(e.prototype),"position",t,this,!0);var r=this.x2,i=this.y;if(this.staves){var o=this.staves.by0s.map((function(t,e){return i+t})),s=r-this.style.system.partNamePaddingRight;if(this.bracesLayouts){var u=this.style.systemHead,c=u.bracePaddingRight,f=u.braceWidth;s-=c+f}var l=this.staves.partsToCellsIndices,h=this.style.bar.lineHeight;this.partNamesLayouts.forEach((function(t,e){var n=l[e],r=o[n[0]]-h,i=o[a(n)];t.position={x2:s,cy:(r+i)/2}})),this.bracesLayouts&&(this.setBracesHeight(),this.bracesLayouts.forEach((function(t){t.position={x2:r-n.style.systemHead.bracePaddingRight,y2:i+t.by0}})))}}}])&&fr(n.prototype,r),i&&fr(n,i),e}(In),wr=function(t){function e(t){var n;return cr(this,e),(n=lr(this,dr(e).call(this))).style=t,n.width=t.systemHead.braceWidth,n.strokeWidth=t.systemHead.braceStrokeWidth,n}return vr(e,t),e}(In);function Or(t){return(Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Sr(t){return(Sr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function kr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function jr(t,e){return(jr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var xr=function(t){function e(t,n){var r,i,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i=this,(r=!(o=Sr(e).call(this))||"object"!==Or(o)&&"function"!=typeof o?kr(i):o).name="layout",Object.assign(kr(r),n,t),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&jr(t,e)}(e,t),e}(In);function Lr(t){return(Lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Pr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Er(t){return(Er=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ar(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Dr(t,e){return(Dr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Rr=function(t){function e(t,n){var r,i,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i=this,(r=!(o=Er(e).call(this))||"object"!==Lr(o)&&"function"!=typeof o?Ar(i):o).name="tie-layout",r.tie=t,t.layout=Ar(r),r.style=n;var a=n.tie,s=a.lift,u=a.strokeWidth;return r.lift=s,r.strokeWidth=u,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Dr(t,e)}(e,t),n=e,(r=[{key:"nextTie",get:function(){var t=this.style.chord.tieMode,e=this.tie,n=e.note,r=e.nextNote;return"single"===t&&"note"===n.name&&"chord"===r.name?r.tie:this.tie.next}},{key:"showPrev",get:function(){var t=this.tie.prev;return t&&t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,i=this.nextTie;if(i)if(this.sys===i.layout.sys)t=i.layout.x1,e=i.layout.y1;else{var o=this.tie.cell.layout,a=o.shownRightBarLayout||o.rightBarLayout;t=a.x,e=a.y}else t=n+30,e=r-20;return this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y,n=this.tie.cell.layout.shownLeftBarLayout;return{x1:t,y1:e,x2:n.x,y2:n.y}}}])&&Pr(n.prototype,r),i&&Pr(n,i),e}(In);function Tr(t){return(Tr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Nr(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Cr(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Nr(Object(n),!0).forEach((function(e){qr(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Nr(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function zr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Br(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Mr(t,e,n){return e&&Br(t.prototype,e),n&&Br(t,n),t}function Fr(t,e){return!e||"object"!==Tr(e)&&"function"!=typeof e?Qr(t):e}function Qr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Gr(t,e,n){return(Gr="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Ir(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Wr(t,e,n,r){return(Wr="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Ir(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else qr(r,e,n);return!0})(t,e,n,r)}function Jr(t,e,n,r,i){if(!Wr(t,e,n,r||t)&&i)throw new Error("failed to set property");return n}function qr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ir(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Vr(t)););return t}function Vr(t){return(Vr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ur(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Kr(t,e)}function Kr(t,e){return(Kr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Xr={"#":"","##":"",n:"",b:"",bb:""},Hr=function(t){function e(t,n){var r;zr(this,e),(r=Fr(this,Vr(e).call(this))).name="pitch-layout",r.pitch=t,r.style=n;var i=t.step,o=t.accidental,a=t.octave,s=t.tie;return r.stepLayout=new Zr(i,n),r.accidentalLayout=new Yr(o,n),r.octavesLayout=new _r(a,n),s&&(r.tieLayout=new Rr(s,n)),r.tieMode=n.chord.tieMode,r.setSize(),r}return Ur(e,t),Mr(e,[{key:"setSize",value:function(){var t=this.pitch,e=t.accidental,n=t.octave,r=this.stepLayout,i=r.width,o=r.height,a=e?this.accidentalLayout.width:0,s=(e&&this.accidentalLayout.height,n?this.octavesLayout.height:0),u=this.style.pitch,c=u.stepAccidentalSep,f=u.stepOctaveSep,l=(this.style.accidentalFont.lift,o),h=o+(n?s+f:0);this.width=i+(e?a+c:0),this.height=n>=0?Math.max(l,h):l+f+s,this.dx2=this.stepLayout.width/2,this.dy=this.height}},{key:"toJSON",value:function(){var t=this.stepLayout,n=this.accidentalLayout,r=this.octavesLayout,i=this.tieLayout;return Cr({},Gr(Vr(e.prototype),"toJSON",this).call(this),{stepLayout:t,accidentalLayout:n,octavesLayout:r,tieLayout:i})}},{key:"position",set:function(t){var n=this.pitch,r=n.accidental,i=n.octave,o=n.tie,a=this.style.pitch.stepOctaveSep,s=this.style.accidentalFont.lift;Jr(Vr(e.prototype),"position",t,this,!0);var u=this.x,c=this.x2,f=this.y2-(i>=0?0:this.octavesLayout.height+a);this.stepLayout.position={x2:c,y2:f};var l=this.stepLayout,h=l.cx,y=l.y;if(r&&(this.accidentalLayout.position={x:u,y2:f-s}),i){var p=i>0?{cx:h,y2:y-a}:{cx:h,y:f+a};this.octavesLayout.position=p}if(o){var b=this.stepLayout,d=b.cx,v=b.y;this.tieLayout.position={x:d,y:v}}}}]),e}(In),Zr=function(t){function e(t,n){var r;return zr(this,e),(r=Fr(this,Vr(e).call(this))).name="step-layout",Object.assign(Qr(r),n.stepFont),r}return Ur(e,t),e}(In),Yr=function(t){function e(t,n){var r;return zr(this,e),(r=Fr(this,Vr(e).call(this))).name="accidental-layout",Object.assign(Qr(r),n.accidentalFont),r.char=Xr[t],"bb"===r.accidental&&(r.dx=.66*n.accidentalFont.dx),r}return Ur(e,t),e}(In),_r=function(t){function e(t,n){var r;zr(this,e),(r=Fr(this,Vr(e).call(this))).name="octaves-layout";var i=Math.abs(t),o=n.pitch,a=o.octaveSize,s=o.octavesSep;return r.octave=t,r.style=n,r.width=a,r.height=i*a+(i-1)*s,r.r=a/2,r}return Ur(e,t),Mr(e,[{key:"toJSON",value:function(){return Cr({},Gr(Vr(e.prototype),"toJSON",this).call(this),{layouts:this.layouts})}},{key:"position",set:function(t){var n=this;Jr(Vr(e.prototype),"position",t,this,!0);var r=this.style.pitch,i=r.octaveSize,o=r.octavesSep;this.layouts=[];var a=this.cx,s=this.y,u=this.width,c=this.r;f(Math.abs(this.octave)).forEach((function(){n.layouts.push(new xr({cx:a,y:s},{width:u,height:u,r:c})),s+=i+o}))}}]),e}(In);function $r(t){return($r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ti(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ei(t){return(ei=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ni(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ri(t,e){return(ri=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ii=function(t){function e(t,n,r,i){var o,a,s;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),a=this,(o=!(s=ei(e).call(this))||"object"!==$r(s)&&"function"!=typeof s?ni(a):s).name="beam-layout",o.beam=t,t.layout=ni(o),o.duration=n,o.dotsLayout=r,o.style=i,o.setSize(),o}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ri(t,e)}(e,t),n=e,(r=[{key:"setSize",value:function(){var t=this.style,e=t.stepFont,n=t.note,r=t.durationGE4;this.width=e.width+(this.duration.dots?this.dotsLayout.width+n.pitchDotSep:0),this.height=r.beamHeight}},{key:"beamedWidth",get:function(){return this.beam.endBeam.layout.x2-this.x}}])&&ti(n.prototype,r),i&&ti(n,i),e}(In);function oi(t){return(oi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ai(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function si(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ai(Object(n),!0).forEach((function(e){bi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ai(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function ui(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ci(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function fi(t,e,n){return e&&ci(t.prototype,e),n&&ci(t,n),t}function li(t,e){return!e||"object"!==oi(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function hi(t,e,n){return(hi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=di(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function yi(t,e,n,r){return(yi="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=di(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else bi(r,e,n);return!0})(t,e,n,r)}function pi(t,e,n,r,i){if(!yi(t,e,n,r||t)&&i)throw new Error("failed to set property");return n}function bi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function di(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=vi(t)););return t}function vi(t){return(vi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function mi(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&gi(t,e)}function gi(t,e){return(gi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var wi=function(t){function e(t,n){var r;ui(this,e),(r=li(this,vi(e).call(this))).name="duration-layout",r.duration=t,r.style=n;var i=t.type;return t.dots&&(r.dotsLayout=new ki(t,n)),i<4?r.linesLayout=new Oi(t,n):i>4&&(r.beamsLayout=new Si(t,r.dotsLayout,n)),r.setSize(),r}return mi(e,t),fi(e,[{key:"setSize",value:function(){var t=this.duration,e=t.type,n=t.dots;4===e?this.setType4Size(n):e>4?this.setTypeGt4Size(n):this.setTypeLt4Size(n),this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.linesLayout.width,n=this.linesLayout.height;if(t){var r=this.linesLayout,i=(r.width,r.height,this.dotsLayout.width),o=this.dotsLayout.height;this.width=e+this.style.durationLE2.lineDotSep+i,this.height=Math.max(n,o)}else this.width=e,this.height=n}},{key:"setType4Size",value:function(t){this.width=t?this.dotsLayout.width:0,this.height=t?this.dotsLayout.height:0}},{key:"setTypeGt4Size",value:function(t){if(this.width=this.beamsLayout.width,this.height=this.beamsLayout.height,t){var e=this.style.note.pitchBeamSep,n=this.style.durationGE4.dotLift;this.height+=e+n+this.dotsLayout.height}}},{key:"toJSON",value:function(){var t=this.beamsLayout,n=this.linesLayout,r=this.dotsLayout;return si({},hi(vi(e.prototype),"toJSON",this).call(this),{beamsLayout:t,linesLayout:n,dotsLayout:r})}},{key:"position",set:function(t){pi(vi(e.prototype),"position",t,this,!0);var n=this.duration,r=n.type,i=n.dots,o=this.style,a=(o.durationLE2,o.durationGE4,this.x),s=this.x2,u=this.y,c=this.cy,f=this.y2;r<4?(this.linesLayout.position={x:a,cy:c},i&&(this.dotsLayout.position={x2:s,cy:c})):(r>4&&(this.beamsLayout.position={x:a,y2:f}),i&&(this.dotsLayout.position={x2:s,y:u}))}}]),e}(In),Oi=function(t){function e(t,n){var r;return ui(this,e),(r=li(this,vi(e).call(this))).name="lines-layout",r.duration=t,r.style=n,r.setLineSize(),r.setSize(t.type),r}return mi(e,t),fi(e,[{key:"setLineSize",value:function(){var t=this.style.durationLE2,e=t.lineWidth,n=t.lineHeight;this.lineSize={width:e,height:n}}},{key:"setSize",value:function(t){var e=this.style.durationLE2,n=e.lineWidth,r=e.linesSep,i=e.lineHeight;this.width=2===t?n:3*n+2*r,this.height=i}},{key:"position",set:function(t){var n=this;pi(vi(e.prototype),"position",t,this,!0);var r=this.duration,i=r.type,o=(r.dots,this.style.durationLE2),a=o.lineWidth,s=o.linesSep,u=this.x,c=this.cy;this.layouts=f(2===i?1:3).map((function(t){return new xr({x:u+t*(a+s),cy:c},n.lineSize)}))}}]),e}(In),Si=function(t){function e(t,n,r){var i;return ui(this,e),(i=li(this,vi(e).call(this))).name="beams-layout",i.duration=t,i.dotsLayout=n,i.style=r,i.layouts=t.beams.map((function(e){return new ii(e,t,n,r)})),i.setSize(),i}return mi(e,t),fi(e,[{key:"setSize",value:function(){var t=this.duration.numBeams,e=this.style.durationGE4,n=e.beamHeight,r=e.beamsSep;this.width=this.layouts[0].width,this.height=t*n+(t-1)*r}},{key:"toJSON",value:function(){return si({},hi(vi(e.prototype),"toJSON",this).call(this),{layouts:this.layouts})}},{key:"position",set:function(t){pi(vi(e.prototype),"position",t,this,!0);var n=this.x,r=this.y2,i=this.style.durationGE4,o=i.beamHeight,a=i.beamsSep;this.layouts.forEach((function(t,e){t.position={x:n,y2:r},r-=o+a}))}}]),e}(In),ki=function(t){function e(t,n){var r;return ui(this,e),(r=li(this,vi(e).call(this))).name="dots-layout",r.duration=t,r.style=n,r.setDotSize(t.type),r.setSize(t.type,t.dots),r}return mi(e,t),fi(e,[{key:"setDotSize",value:function(t){var e=this.style,n=e.durationGE4,r=e.durationLE2,i=t>=4?n.dotSize:r.dotSize;this.dotSize={width:i,height:i,r:i/2}}},{key:"setSize",value:function(t,e){var n=this.style,r=n.durationGE4,i=n.durationLE2,o=function(t){return e*t.dotSize+(e-1)*t.dotsSep};this.width=o(t>=4?r:i),this.height=this.dotSize.height}},{key:"toJSON",value:function(){return si({},hi(vi(e.prototype),"toJSON",this).call(this),{layouts:this.layouts})}},{key:"position",set:function(t){var n=this;pi(vi(e.prototype),"position",t,this,!0);var r=this.duration,i=r.type,o=r.dots;if(i>=4){var a=this.style.durationGE4.dotsSep,s=this.x2,u=this.y;this.layouts=f(o).map((function(t){return new xr({x2:s-t*(n.dotSize.width+a),y:u},n.dotSize)}))}else{var c=this.style.durationLE2.dotsSep,l=this.x2,h=this.cy;this.layouts=f(o).map((function(t){return new xr({x2:l-t*(n.dotSize.width+c),cy:h},n.dotSize)}))}}}]),e}(In);function ji(t){return(ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Li(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Pi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ei(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ai(t,e,n){return(Ai="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Di(t)););return t}(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Di(t){return(Di=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ri(t,e){return(Ri=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Ti=function(t){function e(t,n){var r,i,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i=this,(r=!(o=Di(e).call(this))||"object"!==ji(o)&&"function"!=typeof o?Ei(i):o).name="tuplet-layout",r.tuplet=t,t.layout=Ei(r),r.style=n,r.textLayout=new Hn(t.actual,n.tupletFont);var a=n.tuplet,s=a.lift,u=a.strokeWidth;return r.lift=s,r.strokeWidth=u,r.pitchTupletSep=n.note.pitchTupletSep,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ri(t,e)}(e,t),n=e,(r=[{key:"toJSON",value:function(){var t=this.textLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?xi(Object(n),!0).forEach((function(e){Li(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):xi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},Ai(Di(e.prototype),"toJSON",this).call(this),{textLayout:t})}},{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,i=this.tuplet.next;return i?(t=i.layout.x1,e=i.layout.y1):(t=n+30,e=r-20),this.textLayout.position={cx:(n+t)/2,cy:(r+e)/2-this.pitchTupletSep-this.lift},this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}}])&&Pi(n.prototype,r),i&&Pi(n,i),e}(In);function Ni(t){return(Ni="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ci(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function zi(t){return(zi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Bi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Mi(t,e){return(Mi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Fi=function(t){function e(t,n){var r,i,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i=this,(r=!(o=zi(e).call(this))||"object"!==Ni(o)&&"function"!=typeof o?Bi(i):o).name="slur-layout",r.slur=t,t.layout=Bi(r),r.style=n;var a=n.slur,s=a.lift,u=a.strokeWidth;return r.lift=s,r.strokeWidth=u,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Mi(t,e)}(e,t),n=e,(r=[{key:"showPrev",get:function(){var t=this.slur.prev;return!t||t.layout.sys!==this.sys}},{key:"endPoints",get:function(){var t,e,n=this.x1,r=this.y1,i=this.slur.next;if(i)if(this.sys===i.layout.sys)t=i.layout.x1,e=i.layout.y1;else{var o=a(this.systemLayout.measuresLayouts).cellsLayouts[this.c],s=o.shownRightBarLayout||o.rightBarLayout;t=s.x,e=s.y}else t=n+30,e=r-20;return this.width=t-n,this.height=Math.abs(e-r),{x1:n,y1:r,x2:t,y2:e}}},{key:"prevEndPoints",get:function(){var t=this.x,e=this.y;if(!this.slur.prev)return{x1:t,y1:e,x2:t-30,y2:e-20};var n=this.systemLayout.measuresLayouts[0].cellsLayouts[this.c].shownLeftBarLayout;return{x1:t,y1:e,x2:n.x,y2:n.y}}}])&&Ci(n.prototype,r),i&&Ci(n,i),e}(In);function Qi(t){return(Qi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Gi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Wi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ji(t,e){return!e||"object"!==Qi(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function qi(t,e,n){return(qi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Ui(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Ii(t,e,n,r){return(Ii="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Ui(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Vi(r,e,n);return!0})(t,e,n,r)}function Vi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ui(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ki(t)););return t}function Ki(t){return(Ki=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Xi(t,e){return(Xi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Hi=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=Ji(this,Ki(e).call(this))).name="note-layout",r.note=t,r.style=n,r.pitchLayout=new Hr(t.pitch,n),r.durationLayout=new wi(t.duration,n),r.setSize(t.duration,r.pitchLayout);var i=t.tie,o=t.tuplet,a=t.beginSlurs,s=t.endSlurs,u=t.lyrics;return i&&(r.tieLayout=new Rr(i,n)),o&&(r.tupletLayout=new Ti(o,n)),a&&(r.beginSlursLayouts=a.map((function(t){return new Fi(t,n)}))),s&&(r.endSlursLayouts=s.map((function(t){return new Fi(t,n)}))),u&&(r.lyricsLayouts=u.map((function(t){var e=new Hn(t.text,n.lyricsFont);return e.lyric=t,t.layout=e,e.dx=e.width/2,e}))),r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xi(t,e)}(e,t),n=e,(r=[{key:"setSize",value:function(t,e){var n=t.type,r=t.dots;n<4?this.setTypeLt4Size(e):4===n?this.setType4Size(r,e):this.setTypeGt4Size(r,e),this.dx=e.dx;var i=(this.note||this.chord||this.rest).lyrics;if(i){var o=i.length,a=this.style.note,s=a.dataLyricSep+a.lyricsVSep*(o-1)+this.style.lyricsFont.height*o;this.height+=s,this.dy2=s}else this.dy=this.height}},{key:"setTypeLt4Size",value:function(t){var e=this.durationLayout,n=this.style.note.pitchLineSep;this.width=t.width+n+e.width,this.height=t.height}},{key:"setType4Size",value:function(t,e){var n=this.style.note.pitchDotSep,r=this.durationLayout;this.width=e.width+(t?r.width+n:0),this.height=e.height}},{key:"setTypeGt4Size",value:function(t,e){var n=this.style.note.pitchBeamSep,r=this.style.stepFont,i=this.durationLayout;this.width=e.width+(t?i.width-r.width:0),this.height=e.height+n+i.beamsLayout.height}},{key:"toJSON",value:function(){var t=this.pitchLayout,n=this.durationLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Gi(Object(n),!0).forEach((function(e){Vi(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Gi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},qi(Ki(e.prototype),"toJSON",this).call(this),{pitchLayout:t,durationLayout:n})}},{key:"position",set:function(t){var n=this;!function(t,e,n,r,i){if(!Ii(t,e,n,r||t)&&i)throw new Error("failed to set property")}(Ki(e.prototype),"position",t,this,!0);var r=this.note.pitch.octave,i=this.note.duration,o=i.type,a=i.dots,s=this.style.durationGE4.dotLift,u=this.x,c=this.y,f=this.x2,l=this.by,h=this.pitchLayout,y=h.stepLayout,p=h.octavesLayout;this.pitchLayout.position={x:u,y:c},o>4&&a&&r<0&&(this.durationLayout.beamsLayout.height+=p.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===o?{x2:f,by:y.by-s}:o>4?{x:y.x,by:l}:{x2:f,cy:y.cy};var b=this.note,d=b.tie,v=b.tuplet,m=b.beginSlurs,g=b.endSlurs,w=b.lyrics;if(d||v||m||g){var O=this.pitchLayout.stepLayout,S=O.cx,k=O.y;d&&(this.tieLayout.position={x:S,y:k}),v&&(this.tupletLayout.position={x:S,y:this.y}),m&&this.beginSlursLayouts.forEach((function(t){t.position={x:S,y:k}})),g&&this.endSlursLayouts.forEach((function(t){t.position={x:S,y:k}}))}if(w){var j=this.style.note,x=j.dataLyricSep,L=j.lyricsVSep,P=this.style.lyricsFont,E=P.dy,A=P.height,D=this.by+x+E;this.lyricsLayouts.forEach((function(t,e){t.position={cx:n.bx,by:D+(L+A)*e}}))}}}])&&Wi(n.prototype,r),i&&Wi(n,i),e}(In);function Zi(t){return(Zi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Yi(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function _i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function to(t,e){return!e||"object"!==Zi(e)&&"function"!=typeof e?eo(t):e}function eo(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function no(t,e,n){return(no="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=oo(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function ro(t,e,n,r){return(ro="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=oo(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else io(r,e,n);return!0})(t,e,n,r)}function io(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function oo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ao(t)););return t}function ao(t){return(ao=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function so(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&uo(t,e)}function uo(t,e){return(uo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var co=Hi.prototype,fo=co.setSize,lo=co.setTypeLt4Size,ho=co.setType4Size,yo=co.setTypeGt4Size,po=function(t){function e(t,n){var r;return _i(this,e),(r=to(this,ao(e).call(this))).setSize=fo,r.setTypeLt4Size=lo,r.setType4Size=ho,r.setTypeGt4Size=yo,r.name="rest-layout",r.rest=t,r.style=n,r.zeroLayout=new bo(n),r.durationLayout=new wi(t.duration,n),r.setSize(t.duration,r.zeroLayout),r}var n,r,i;return so(e,t),n=e,(r=[{key:"toJSON",value:function(){var t=this.zeroLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Yi(Object(n),!0).forEach((function(e){io(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Yi(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},no(ao(e.prototype),"toJSON",this).call(this),{zeroLayout:t})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!ro(t,e,n,r||t)&&i)throw new Error("failed to set property")}(ao(e.prototype),"position",t,this,!0);var n=this.x,r=this.y,i=this.x2,o=this.y2,a=this.rest.duration.type,s=this.style.durationGE4.dotLift;this.zeroLayout.position={x:n,y:r},this.durationLayout.position=4===a?{x2:i,y2:this.zeroLayout.y2-s}:a>4?{x:this.zeroLayout.x,y2:o}:{x2:i,cy:this.zeroLayout.cy}}}])&&$i(n.prototype,r),i&&$i(n,i),e}(In),bo=function(t){function e(t){var n;return _i(this,e),n=to(this,ao(e).call(this)),Object.assign(eo(n),t.restFont),n.dx=n.width/2,n}return so(e,t),e}(In);function vo(t){return(vo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function mo(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function go(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?mo(Object(n),!0).forEach((function(e){Po(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):mo(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function wo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Oo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function So(t,e,n){return e&&Oo(t.prototype,e),n&&Oo(t,n),t}function ko(t,e){return!e||"object"!==vo(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function jo(t,e,n){return(jo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Eo(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function xo(t,e,n,r){return(xo="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Eo(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Po(r,e,n);return!0})(t,e,n,r)}function Lo(t,e,n,r,i){if(!xo(t,e,n,r||t)&&i)throw new Error("failed to set property");return n}function Po(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Eo(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ao(t)););return t}function Ao(t){return(Ao=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Do(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ro(t,e)}function Ro(t,e){return(Ro=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var To=Hi.prototype,No=To.setSize,Co=To.setTypeLt4Size,zo=To.setType4Size,Bo=To.setTypeGt4Size,Mo=function(t){function e(t,n){var r;wo(this,e),(r=ko(this,Ao(e).call(this))).setSize=No,r.setTypeLt4Size=Co,r.setType4Size=zo,r.setTypeGt4Size=Bo,r.name="chord-layout",r.chord=t,r.style=n,r.pitchesLayout=new Fo(t.pitches,n),r.durationLayout=new wi(t.duration,n),r.setSize(t.duration,r.pitchesLayout),r.tieMode=n.chord.tieMode;var i=t.tie,o=t.tuplet,a=t.beginSlurs,s=t.endSlurs,u=t.lyrics;return i&&(r.tieLayout=new Rr(i,n)),o&&(r.tupletLayout=new Ti(o,n)),a&&(r.beginSlursLayouts=a.map((function(t){return new Fi(t,n)}))),s&&(r.endSlursLayouts=s.map((function(t){return new Fi(t,n)}))),u&&(r.lyricsLayouts=u.map((function(t){var e=new Hn(t.text,n.lyricsFont);return e.lyric=t,t.layout=e,e.dx=e.width/2,e}))),r}return Do(e,t),So(e,[{key:"toJSON",value:function(){var t=this.pitchesLayout;return go({},jo(Ao(e.prototype),"toJSON",this).call(this),{pitchesLayout:t})}},{key:"position",set:function(t){var n=this;Lo(Ao(e.prototype),"position",t,this,!0);var r=this.x,i=this.y,o=this.x2,a=this.y2;this.pitchesLayout.position={x:r,y:i};var s=this.chord.pitches[0].octave,u=this.chord.duration,c=u.type,f=u.dots,l=this.style.durationGE4.dotLift,h=this.pitchesLayout.layouts[0],y=h.stepLayout,p=h.octavesLayout;c>4&&f&&s<0&&(this.durationLayout.beamsLayout.height+=p.height+this.style.pitch.stepOctaveSep,this.durationLayout.setSize()),this.durationLayout.position=4===c?{x2:o,y2:y.y2-l}:c>4?{x:y.x,y2:a}:{x2:o,cy:y.cy};var b=this.chord,d=b.tie,v=b.tuplet,m=b.beginSlurs,g=b.endSlurs,w=b.lyrics;if(d||v||m||g){var O=this.pitchesLayout.layouts[0].stepLayout.cx;d&&(this.tieLayout.position={x:O,y:i}),v&&(this.tupletLayout.position={x:O,y:this.y}),m&&this.beginSlursLayouts.forEach((function(t){t.position={x:O,y:i}})),g&&this.endSlursLayouts.forEach((function(t){t.position={x:O,y:i}}))}if(w){var S=this.style.chord,k=S.dataLyricSep,j=S.lyricsVSep,x=this.style.lyricsFont,L=x.dy,P=x.height,E=this.by+k+L;this.lyricsLayouts.forEach((function(t,e){t.position={cx:n.bx,by:E+(j+P)*e}}))}}}]),e}(In),Fo=function(t){function e(t,n){var r;wo(this,e),(r=ko(this,Ao(e).call(this))).pitches=t,r.style=n;var i=n.chord.pitchesSep,o=0,a=-i;return r.layouts=t.map((function(t){return new Hr(t,n)})),r.layouts.forEach((function(t){o=Math.max(o,t.width),a+=t.height+i})),r.width=o,r.dx2=r.layouts[0].dx2,r.height=a,r}return Do(e,t),So(e,[{key:"toJSON",value:function(){var t=this.layouts;return go({},jo(Ao(e.prototype),"toJSON",this).call(this),{layouts:t})}},{key:"position",set:function(t){var n=this;Lo(Ao(e.prototype),"position",t,this,!0);var r=this.x2,i=this.y2;this.layouts.forEach((function(t){t.position={x2:r,y2:i},i=t.y-n.style.chord.pitchesSep}))}}]),e}(In);function Qo(t){return(Qo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Go(t,e){return!e||"object"!==Qo(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Wo(t){return(Wo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Jo(t,e){return(Jo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var qo=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=Go(this,Wo(e).call(this))).name="multipart-layout",r.multipart=t,r.style=n,r.width=20,r.height=20,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Jo(t,e)}(e,t),e}(In);function Io(t){return(Io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Vo(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Uo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ko(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Xo(t,e){return!e||"object"!==Io(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ho(t,e,n){return(Ho="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=_o(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Zo(t,e,n,r){return(Zo="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=_o(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Yo(r,e,n);return!0})(t,e,n,r)}function Yo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _o(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=$o(t)););return t}function $o(t){return($o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ta(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ea(t,e)}function ea(t,e){return(ea=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var na=function(t){function e(t,n){var r;return Uo(this,e),(r=Xo(this,$o(e).call(this))).name="time-layout",r.time=t,r.style=n,r.beatsLayout=new Hn(t.beats,n.timeFont),r.beatTypeLayout=new Hn(t.beatType,n.timeFont),r.lineLayout=new ra(r.beatsLayout,r.beatTypeLayout,n),r.width=r.lineLayout.width,r.dx=r.width/2,r.setHeight(),r}var n,r,i;return ta(e,t),n=e,(r=[{key:"setHeight",value:function(){var t=this.style,e=t.time,n=t.timeFont,r=this.lineLayout.height;this.height=2*n.height+r+2*e.lineNumberSep,this.dy=this.height}},{key:"toJSON",value:function(){var t=this.beatsLayout,n=this.lineLayout,r=this.beatTypeLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Vo(Object(n),!0).forEach((function(e){Yo(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Vo(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},Ho($o(e.prototype),"toJSON",this).call(this),{beatsLayout:t,lineLayout:n,beatTypeLayout:r})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!Zo(t,e,n,r||t)&&i)throw new Error("failed to set property")}($o(e.prototype),"position",t,this,!0);var n=this.cx,r=this.y,i=this.cy,o=this.y2;this.beatsLayout.position={cx:n,y:r},this.lineLayout.position={cx:n,cy:i},this.beatTypeLayout.position={cx:n,y2:o}}}])&&Ko(n.prototype,r),i&&Ko(n,i),e}(In),ra=function(t){function e(t,n,r){var i;return Uo(this,e),(i=Xo(this,$o(e).call(this))).width=Math.max(t.width,n.width)+2*r.time.lineExt,i.height=r.time.lineHeight,i}return ta(e,t),e}(In);function ia(t){return(ia="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function oa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function aa(t,e){return!e||"object"!==ia(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function sa(t,e,n,r){return(sa="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ua(t)););return t}(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else!function(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n}(r,e,n);return!0})(t,e,n,r)}function ua(t){return(ua=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ca(t,e){return(ca=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var fa=function(t){function e(t,n){var r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=aa(this,ua(e).call(this))).name="direction-layout",r.direction=t,r.style=n;var i=t.words,o=t.dynamics;t.wedge;return i?r.textLayout=new Hn(i,n.directionFont):o&&(r.textLayout=new Hn(o,n.dynamicsFont)),r.setSize(),r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ca(t,e)}(e,t),n=e,(r=[{key:"setSize",value:function(){this.textLayout?(this.width=this.textLayout.width,this.height=this.textLayout.height):(this.width=20,this.height=0),this.dx=this.width/2,this.dy=this.height}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!sa(t,e,n,r||t)&&i)throw new Error("failed to set property")}(ua(e.prototype),"position",t,this,!0);var n=this.x,r=this.y;this.textLayout&&(this.textLayout.position={x:n,y:r})}}])&&oa(n.prototype,r),i&&oa(n,i),e}(In);function la(t){return(la="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ha(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ya(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function pa(t,e){return!e||"object"!==la(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ba(t,e,n){return(ba="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=ma(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function da(t,e,n,r){return(da="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=ma(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else va(r,e,n);return!0})(t,e,n,r)}function va(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ma(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ga(t)););return t}function ga(t){return(ga=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function wa(t,e){return(wa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Oa=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=pa(this,ga(e).call(this))).name="bar-layout",r.bar=t,r.style=n,r.displayLines=!0,r.displayDots=!0,r.setSize(),r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wa(t,e)}(e,t),n=e,(r=[{key:"setHeight",value:function(t){this.height=t,this.lightSize.height=t,this.heavySize.height=t}},{key:"setSize",value:function(){var t=this.style.bar,e=t.lightWidth,n=t.heavyWidth,r=t.lineHeight,i=t.dotSize,o=t.linesSep,a=t.lineDotSep;this.lightSize={width:e,height:r},this.heavySize={width:n,height:r},this.dotSize={width:i,height:i,r:i/2};var s,u=function(){return e+o+n},c=function(){return u()+a+i};switch(this.bar.value){case"|":s=this.lightSize;break;case"||":s={width:2*e+o,height:r};break;case"|]":s={width:u(),height:r};break;case":|":case"|:":s={width:c(),height:r};break;case":|:":s={width:2*c()-n,height:r}}Object.assign(this,s,{dy:s.height})}},{key:"toJSON",value:function(){var t=this.linesLayouts,n=this.dotsLayouts;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ha(Object(n),!0).forEach((function(e){va(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ha(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},ba(ga(e.prototype),"toJSON",this).call(this),{linesLayouts:t,dotsLayouts:n})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!da(t,e,n,r||t)&&i)throw new Error("failed to set property")}(ga(e.prototype),"position",t,this,!0);var n=this.bar.value,r=this.style.bar,i=this.x,o=this.y,a=this.cy,s=this.x2,u=new xr({x:i,y:o},this.lightSize);if(this.linesLayouts=[],"|"===n)this.linesLayouts=[u];else if("||"===n)this.linesLayouts=[u,new xr({x2:s,y:o},this.lightSize)];else if("|]"===n)this.linesLayouts=[u,new xr({x2:s,y:o},this.heavySize)];else if(":|"===n||":|:"===n){var c=i+r.dotSize/2,f=(r.dotsSep+r.dotSize)/2;this.dotsLayouts=[new xr({x:i,cy:a-f},this.dotSize),new xr({x:i,cy:a+f},this.dotSize)],c=i+r.dotSize+r.lineDotSep,this.linesLayouts=[new xr({x:c,y:o},this.lightSize),new xr({x:c+r.lightWidth+r.linesSep,y:o},this.heavySize)],":|:"===n&&(c+=r.lightWidth+2*r.linesSep+r.heavyWidth,this.linesLayouts.push(new xr({x:c,y:o},this.lightSize)))}if("|:"===n||":|:"===n){var l=(r.dotsSep+r.dotSize)/2;this.dotsLayouts=this.dotsLayouts||[],this.dotsLayouts.push(new xr({x2:s,cy:a-l},this.dotSize),new xr({x2:s,cy:a+l},this.dotSize)),"|:"===n&&(this.linesLayouts=[new xr({x:i,y:o},this.heavySize),new xr({x:i+r.heavyWidth+r.linesSep,y:o},this.lightSize)])}}}])&&ya(n.prototype,r),i&&ya(n,i),e}(In);function Sa(t){return(Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ka(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ja(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ka(Object(n),!0).forEach((function(e){Na(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ka(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function xa(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function La(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Pa(t,e,n){return e&&La(t.prototype,e),n&&La(t,n),t}function Ea(t,e){return!e||"object"!==Sa(e)&&"function"!=typeof e?Aa(t):e}function Aa(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Da(t,e,n){return(Da="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Ca(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Ra(t,e,n,r){return(Ra="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Ca(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Na(r,e,n);return!0})(t,e,n,r)}function Ta(t,e,n,r,i){if(!Ra(t,e,n,r||t)&&i)throw new Error("failed to set property");return n}function Na(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ca(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=za(t)););return t}function za(t){return(za=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ba(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ma(t,e)}function Ma(t,e){return(Ma=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Fa={"|:":"|:",":|:":"|:","||":"||"},Qa={":|":":|",":|:":":|","||":"||","|]":"|]"},Ga=function(t){function e(t,n){var r;return xa(this,e),(r=Ea(this,za(e).call(this))).name="cell-layout",r.cell=t,t.layout=Aa(r),r.style=n,r.dataLayout=new Wa(t.data,n),r.leftBarLayout=new Oa(t.leftBar,n),r.rightBarLayout=new Oa(t.rightBar,n),r.sticks=[],r.dataLayout.sticks=r.sticks,r.height=Math.max(r.dataLayout.dy,r.rightBarLayout.height)+r.dataLayout.dy2,r.dy2=r.dataLayout.dy2,r}return Ba(e,t),Pa(e,[{key:"addShownLeftBar",value:function(){var t=this.cell,e=t.leftBar.value;e=Fa[e],t.shownLeftBar=new ee(e),this.shownLeftBarLayout=new Oa(t.shownLeftBar,this.style),this.setMinWidth()}},{key:"addShownRightBar",value:function(){var t=this.cell,e=t.rightBar.value;e=Qa[e],t.shownRightBar=new ee(e),this.shownRightBarLayout=new Oa(t.shownRightBar,this.style),this.setMinWidth()}},{key:"setMinWidth",value:function(){var t=this.style.cell,e=t.paddingLeft,n=t.paddingRight,r=this.cell,i=r.shownLeftBarLayout,o=r.shownRightBarLayout;this.minWidth=this.dataLayout.minWidth+e+n+(i?i.width:this.leftBarLayout.width/2)+(o?o.width:this.rightBarLayout.width/2),(!this.width||this.width<this.minWidth)&&(this.width=this.minWidth)}},{key:"reflow",value:function(t){var e=t-this.width;this.width=t,this.dataLayout.width+=e}},{key:"toJSON",value:function(){var t=this.dataLayout,n=this.leftBarLayout,r=this.rightBarLayout;return ja({},Da(za(e.prototype),"toJSON",this).call(this),{dataLayout:t,leftBarLayout:n,rightBarLayout:r})}},{key:"position",set:function(t){Ta(za(e.prototype),"position",t,this,!0);var n=this.x,r=this.x2,i=this.by,o=this.style.cell,a=o.paddingLeft,s=o.paddingRight,u=this.shownLeftBarLayout,c=this.shownRightBarLayout;u&&(u.position={x:n,by:i},n+=u.width+a,this.dataLayout.position={x:n,by:i}),c?(c.position={x2:r,by:i},r=c.x-s,this.dataLayout.position={x2:r,by:i}):(this.rightBarLayout.position={cx:r,by:i},r=this.rightBarLayout.x-s,this.dataLayout.position={x2:r,by:i})}}]),e}(In),Wa=function(t){function e(t,n){var r;return xa(this,e),(r=Ea(this,za(e).call(this))).name="data-layout",r.data=t,r.style=n,r.setLayouts(),r.width=r.minWidth,r.setHeight(),r}return Ba(e,t),Pa(e,[{key:"setLayouts",value:function(){var t=this,e=this.data,n=this.style;this.layouts=[],e.forEach((function(e){switch(e.name){case"note":t.layouts.push(new Hi(e,n));break;case"rest":t.layouts.push(new po(e,n));break;case"chord":t.layouts.push(new Mo(e,n));break;case"multipart":t.layouts.push(new qo(e,n));break;case"time":t.layouts.push(new na(e,n));break;case"direction":t.layouts.push(new fa(e,n))}}))}},{key:"setMinWidth",value:function(){var t=this.sticks[0],e=a(this.sticks);this.minWidth=t.dx+e.x+e.dx2,this.width=this.minWidth}},{key:"setHeight",value:function(){var t=u(this.layouts.map((function(t){return t.dy})).concat(0)),e=u(this.layouts.map((function(t){return t.dy2})).concat(0));this.height=t+e,this.dy=t}},{key:"toJSON",value:function(){var t=this.layouts;return ja({},Da(za(e.prototype),"toJSON",this).call(this),{layouts:t})}},{key:"position",set:function(t){Ta(za(e.prototype),"position",t,this,!0);var n=this.style.cell,r=(n.dataSep,n.dataDirectionSep),i=this.x,o=this.by;this.sticks.forEach((function(t){var e=t.dirsAbove,n=t.main,a=t.dirsBelow,s=t.x,u=i+s;if(n&&(n.position={bx:u,by:o}),e&&e.length){var c=n.y-r;e[0].position={bx:u,y2:c}}if(a&&a.length){var f=o+r;a[0].position={bx:u,y:f}}}))}}]),e}(In);function Ja(t){return(Ja="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function qa(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ia(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Va(t,e){return!e||"object"!==Ja(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ua(t,e,n){return(Ua="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Ha(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Ka(t,e,n,r){return(Ka="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Ha(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Xa(r,e,n);return!0})(t,e,n,r)}function Xa(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Ha(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Za(t)););return t}function Za(t){return(Za=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ya(t,e){return(Ya=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var _a=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=Va(this,Za(e).call(this))).name="measure-layout",r.measure=t,r.style=n,r.cellsLayouts=t.cells.map((function(t){return new Ga(t,n)})),r.makeSticks(),r.alignSticks(),r.setCellsSticks(),r.cellsLayouts.forEach((function(t){t.dataLayout.setMinWidth(),t.setMinWidth()})),r.minWidth=u(r.cellsLayouts.map((function(t){return t.minWidth}))),r.width=r.minWidth,r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ya(t,e)}(e,t),n=e,(r=[{key:"setHeight",value:function(t,e){this.height=t,this.staves=e}},{key:"reflow",value:function(t){this.width=t,this.cellsLayouts.forEach((function(e){return e.reflow(t)}));var e=this.cellsLayouts[0].dataLayout.width;ss(this.sticks,e),this.setCellsSticks()}},{key:"connectBars",value:function(t,e){var n=this,r=function(t){var e=t.shownLeftBarLayout,n=t.leftBarLayout;return e||n},i=function(t){var e=t.shownRightBarLayout,n=t.rightBarLayout;return e||n};e.forEach((function(e){if(!(e.length<2)){var o=[e[0],a(e)];!function(t,e){if(e[0]!==e[1]){var o=n.staves.by0s[e[1]]-n.staves.by0s[e[0]]+n.style.bar.lineHeight;if("left"===t){n.leftBarLayouts=n.leftBarLayouts||[];var a=r(n.cellsLayouts[e[0]]).bar.value,s=new Oa(new ee(a),n.style);s.setHeight(o),s.displayDots=!1,s.lastCellIndex=e[1],n.leftBarLayouts.push(s)}else if("right"===t){n.rightBarLayouts=n.rightBarLayouts||[];var u=i(n.cellsLayouts[e[0]]).bar.value,c=new Oa(new ee(u),n.style);c.setHeight(o),c.displayDots=!1,c.lastCellIndex=e[1],n.rightBarLayouts.push(c)}}}(t,o),f(o[0],o[1]+1).forEach((function(e){"left"===t?r(n.cellsLayouts[e]).displayLines=!1:"right"===t&&(i(n.cellsLayouts[e]).displayLines=!1)}))}}))}},{key:"makeSticks",value:function(){var t=this.cellsLayouts.map((function(t){return $a(t)}));for(this.sticks=[];ts(t);)this.sticks.push(es(t))}},{key:"alignSticks",value:function(){var t=this;if(this.sticks.length){var e=this.sticks[0];ns(e),e.x=e.minX=e.dx,rs(a(this.sticks));var n=is(this.sticks);this.sticks.forEach((function(e,r){r>0&&os(n,e,t.sticks[r-1],t.style),as(n,e)}))}}},{key:"setCellsSticks",value:function(){var t=this;this.sticks.forEach((function(e){e.cells.forEach((function(n,r){var i=Object.assign({},n,e);delete i.cells,t.cellsLayouts[r].sticks.push(i)}))}))}},{key:"toJSON",value:function(){var t=this.cellsLayouts;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?qa(Object(n),!0).forEach((function(e){Xa(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):qa(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},Ua(Za(e.prototype),"toJSON",this).call(this),{cellsLayouts:t})}},{key:"position",set:function(t){var n=this;!function(t,e,n,r,i){if(!Ka(t,e,n,r||t)&&i)throw new Error("failed to set property")}(Za(e.prototype),"position",t,this,!0);var r=this.x,i=this.x2,o=this.y;if(this.style.system.stavesSep,this.cellsLayouts.forEach((function(t,e){n.atSysBegin&&t.addShownLeftBar(),n.atSysEnd&&t.addShownRightBar(),t.position={x:r,by:o+n.staves.by0s[e]}})),this.atSysBegin){var a=this.cellsLayouts.length-1;if(!a)return;if(this.connectBars("left",[[0,a]]),!this.leftBarLayouts)return;this.leftBarLayouts.forEach((function(t){return t.position={x:r,y2:o+n.staves.by0s[t.lastCellIndex]}}))}else if(this.atSysEnd){if(this.connectBars("right",this.staves.partsToCellsIndices),!this.rightBarLayouts)return;this.rightBarLayouts.forEach((function(t,e){n.staves.partsToCellsIndices[e],t.position={x2:i,y2:o+n.staves.by0s[t.lastCellIndex]}}))}}}])&&Ia(n.prototype,r),i&&Ia(n,i),e}(In),$a=function(t){var e=[],n={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]};return t.dataLayout.layouts.forEach((function(t){var r=t.note,i=t.rest,o=t.chord,a=t.time,s=t.direction,u=(t.multipart,r||i||o||a);u?(n.tcQ=u.tcQ,n.main=t,u.lyrics&&(n.lyrics=t.lyricsLayouts),e.push(n),n={dirsAbove:[],main:null,dirsBelow:[],lyrics:[]}):s&&(n.tcQ=s.tcQ,"above"===s.placement?n.dirsAbove.push(t):n.dirsBelow.push(t))})),e},ts=function(t){for(var e=0;e<t.length;e++){if(t[e].length)return!0}return!1},es=function(t){var e=t.map((function(t){return t[0]})),n=s(e.map((function(t){return t?t.tcQ:1/0}))),r=e.map((function(t){return t&&t.tcQ===n?t:null}));return t.forEach((function(t,e){r[e]&&t.shift()})),{cells:r,tcQ:n}},ns=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"dx",n=0;t.cells.forEach((function(t){if(t){var r=t.main,i=(t.dirsAbove,t.dirsBelow,t.lyrics);r&&(n=Math.max(n,r[e])),i&&(n=u(i.map((function(t){return t[e]})).concat(n).filter((function(t){return void 0!==t}))))}})),t[e]=n},rs=function(t){return ns(t,"dx2")},is=function(t){var e={cells:[]},n=function(t,e,n){var r=e[n].length;r&&(t[n]?t[n].length<r&&(t[n]=l(r)):t[n]=l(r))};return t.forEach((function(t){t.cells.forEach((function(t,r){if(t){var i=e.cells[r]=e.cells[r]||{main:0};t.dirsAbove&&n(i,t,"dirsAbove"),t.dirsBelow&&n(i,t,"dirsBelow"),t.lyrics&&n(i,t,"lyrics")}}))})),e},os=function(t,e,n,r){var i=r.cell.dataSep,o=r.note.lyricsHSep,a=n.x+r.stepFont.width/2+i/2;e.cells.forEach((function(e,n){if(e){var r=t.cells[n],s=e.main,u=(e.dirsAbove,e.dirsBelow,e.lyrics);s&&(a=Math.max(a,r.main+i+s.dx)),u&&u.forEach((function(t,e){a=Math.max(a,r.lyrics[e]+o+t.dx)}))}})),e.x=a,e.minX=a},as=function(t,e){e.cells.forEach((function(n,r){if(n){var i=t.cells[r],o=n.main,a=(n.dirsAbove,n.dirsBelow,n.lyrics);o&&(i.main=e.x+o.dx2),a&&a.forEach((function(t,n){i.lyrics[n]=e.x+t.dx2}))}}))},ss=function(t,e){if(!(t.length<=1)){var n,r,i,o=t[0],s=o.dx,u=o.minX,c=a(t),f=c.dx2,l=(c.minX,e-s-f);n=a(t).tcQ,r=t.length,i=function(t){var e=n?t.tcQ/n:1;return l*e+s},function(t,e){for(var n=t.length-1;n>=0;n--)e(t[n],n)}(t,(function(e,n){if(n!==r-1){var o=t[n+1],a=i(e),s=o.minX-e.minX,u=o.x-s;e.x=Math.min(a,u)}else e.x=i(e)})),t.forEach((function(e,n){if(0!==e.tcQ){var r=t[n-1],i=e.minX-r.minX;e.x-r.x<i&&(e.x=r.x+i)}else e.x=e.minX}))}};function us(t){return(us="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function cs(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function fs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ls(t,e){return!e||"object"!==us(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function hs(t,e,n){return(hs="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=bs(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function ys(t,e,n,r){return(ys="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=bs(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else ps(r,e,n);return!0})(t,e,n,r)}function ps(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function bs(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ds(t)););return t}function ds(t){return(ds=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function vs(t,e){return(vs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var ms=function(t){function e(t,n,r){var i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(i=ls(this,ds(e).call(this))).name="system-layout",i.headLayout=t,i.measures=n,i.style=r;var o=n.length;return i.measuresLayouts=n.map((function(t,e){var n=new _a(t,r);return n.atSysBegin=0===e,n.atSysEnd=e===o-1,n})),i.setHeight(),i}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&vs(t,e)}(e,t),n=e,(r=[{key:"setHeight",value:function(){var t=this;if(this.measuresLayouts.length){var e=l(this.measuresLayouts[0].cellsLayouts.length),n=this.measuresLayouts[0].measure,r=n.partIndices,i=n.partsToCellsIndices;this.staves={partIndices:r,partsToCellsIndices:i,heights:e,dys:e.slice(),dy2s:e.slice(),y0s:[],by0s:[],y20s:[]},this.measuresLayouts.forEach((function(e){e.cellsLayouts.forEach((function(e,n){t.staves.dys[n]=Math.max(t.staves.dys[n],e.dy),t.staves.dy2s[n]=Math.max(t.staves.dy2s[n],e.dy2),t.staves.heights[n]=t.staves.dys[n]+t.staves.dy2s[n]}))})),this.setY0s(),this.height=a(this.staves.y20s),this.headLayout.height=this.height,this.headLayout.staves=this.staves,this.measuresLayouts.forEach((function(e){e.setHeight(t.height,t.staves)}))}else this.height=0}},{key:"setY0s",value:function(){var t=this,e=this.style.system.stavesSep,n=0;this.staves.heights.forEach((function(r,i){t.staves.y0s.push(n),t.staves.by0s.push(n+t.staves.dys[i]),t.staves.y20s.push(n+t.staves.heights[i]),n+=r+e}))}},{key:"toJSON",value:function(){var t=this.headLayout,n=this.measuresLayouts;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?cs(Object(n),!0).forEach((function(e){ps(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):cs(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},hs(ds(e.prototype),"toJSON",this).call(this),{headLayout:t,measuresLayouts:n})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!ys(t,e,n,r||t)&&i)throw new Error("failed to set property")}(ds(e.prototype),"position",t,this,!0);var n=this.x,r=this.y2;this.headLayout.position={x:n,y2:r},n+=this.headLayout.width,this.measuresLayouts.forEach((function(t){t.position={x:n,y2:r},n+=t.width}))}}])&&fs(n.prototype,r),i&&fs(n,i),e}(In);function gs(t){return(gs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ws(t,e){return!e||"object"!==gs(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Os(t){return(Os=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ss(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ks(t,e)}function ks(t,e){return(ks=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function js(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function xs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ls(t,e,n){return e&&xs(t.prototype,e),n&&xs(t,n),t}var Ps=function(){function t(){js(this,t)}return Ls(t,[{key:"isBalanced",get:function(){return this.maxLen-this.minLen<=1}},{key:"maxLen",get:function(){return u(this.lines.map((function(t){return t.len})))}},{key:"minLen",get:function(){return s(this.lines.map((function(t){return t.len})))}}]),t}(),Es=function(t){function e(t){var n,r=t.measures,i=t.fhsw,o=t.ahsw,a=t.style;return js(this,e),(n=ws(this,Os(e).call(this))).measures=r,n.measureMinWidths=r.map((function(t){return new _a(t,a)})).map((function(t){return t.minWidth})),n.fhsw=i,n.ahsw=o,n.lines=[],n}return Ss(e,t),Ls(e,[{key:"obstacleSectioning",value:function(){var t,e=this,n=[],r=0,i=!1;return this.lines.forEach((function(o,a){if(i)return r=a,void(i=!1);o.isObstacle&&(t=a,n.push(new Ds(e.lines.slice(r,t)))),i=o.isObstacle})),i||n.push(new Ds(this.lines.slice(r,this.lines.length))),n}},{key:"mergeSections",value:function(t){var e=(t=t.slice()).shift().lines;this.lines.forEach((function(n){if(n.isObstacle){e.push(n);var r=t.shift();r&&(e=e.concat(r.lines))}})),this.lines=e}},{key:"set",value:function(t,e,n){var r=this;if(e=e||t,"ws"!==t){var i,o=0;(n||this.lens).forEach((function(n,a){i=o+n,r.lines[a][t]=r[e].slice(o,i),o=i}))}else this.lines.forEach((function(t){t.ws=t.mws.slice()}))}},{key:"setIsObstacles",value:function(){var t=this;this.lines.forEach((function(e,n){if(0===n)e.isObstacle=!1;else{var r=t.lines[n-1];r.isObstacle?e.isObstacle=!1:e.isObstacle=a(r.mws)+e.mws[0]>e.sw}}))}},{key:"lens",get:function(){return this.lines.map((function(t){return t.len}))},set:function(t){var e=this;t.length&&0!==t[0]&&(this.lines=[],t.forEach((function(t,n){var r=n?e.ahsw:e.fhsw;e.lines.push(new As(r))})),this.set("mws","measureMinWidths",t),this.set("measures"),this.set("ws"),this.setIsObstacles())}}]),e}(Ps),As=function(){function t(e){js(this,t),this.mws=[],this.ws=[],this.measures=[],this.sw=e}return Ls(t,[{key:"optimizeMeasureWidths",value:function(){var t=this.sw,e=this.ws.map((function(t,e){return{i:e,w:t}})),n=function(n){var r=c(e.slice(n+1).map((function(t){return t.w})).concat(0)),i=(t-r)/(n+1);n<e.length-1&&(i=Math.min(i,e[n+1].w)),f(n+1).forEach((function(t){e[t].w=i}))};e.sort((function(t,e){return t.w-e.w}));for(var r=0;r<e.length&&(n(r),!(c(e.map((function(t){return t.w})))>=t));r++);e.sort((function(t,e){return t.i-e.i})),this.ws=e.map((function(t){return t.w}))}},{key:"len",get:function(){return this.mws.length}}]),t}(),Ds=function(t){function e(t){var n;return js(this,e),(n=ws(this,Os(e).call(this))).lines=t,n}return Ss(e,t),Ls(e,[{key:"balanceReflow",value:function(){for(var t=this.lines,n=function(t,e){return t[e+1].unshift(t[e].pop())};!this.isBalanced;){var r=this.findMaxLenLineIndex(),i=t.map((function(t){return t.mws.slice()}));if(r===t.length-1)break;for(var o=r;o<t.length-1;o++)for(n(i,o);i.length>1&&c(i[o])>t[o].sw;)n(i,o);var s=new e(t.slice(0,t.length-1)).maxLen;if(a(i).length>s)break;if(c(a(i))>a(t).sw)break;this.updateLines(i)}}},{key:"equalReflow",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1/0,e=this.lines;if(e.length){var n=s(e.map((function(t){return t.sw}))),r=u(i(e.map((function(t){return t.mws})))),o=Math.floor(n/r),a=Math.ceil(c(e.map((function(t){return t.len})))/e.length);t=Math.min(t,o,a);var f,l,h=0,y=function(){f=e[h],l=e[h+1],f.len>t&&!l&&(l=new As(f.sw),e.push(l))},p=function(t){l.mws.unshift(t.mws.pop()),l.ws.unshift(t.ws.pop()),l.measures.unshift(t.measures.pop())};for(y();l;){for(;f.len>t;)p(f);h++,y()}e.forEach((function(t){var n=u(e.map((function(t){return t.len}))),r=t.sw/n;t.ws=t.ws.map((function(){return r}))}))}}},{key:"findMaxLenLineIndex",value:function(){var t=this.maxLen;return function(t,e){for(var n=t.length-1;n>=0;n--)if(e(t[n],n))return n}(this.lines,(function(e){return e.len===t}))}},{key:"updateLines",value:function(t){var e=this.lines;e.forEach((function(e,n){e.mws=t[n],e.ws=e.mws.slice()}));for(var n=0;n<e.length-1;n++)for(var r=e[n],i=e[n+1];r.measures.length>r.mws.length;)i.measures.unshift(r.measures.pop())}}]),e}(Ps);function Rs(t){return(Rs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ts(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ns(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Cs(t,e){return!e||"object"!==Rs(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function zs(t,e,n){return(zs="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Fs(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Bs(t,e,n,r){return(Bs="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Fs(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Ms(r,e,n);return!0})(t,e,n,r)}function Ms(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Fs(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Qs(t)););return t}function Qs(t){return(Qs=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Gs(t,e){return(Gs=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var Ws=function(t){function e(t,n){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(r=Cs(this,Qs(e).call(this))).name="body-layout",r.parts=t.parts,r.measures=t.measures,r.style=n,r.setWidth(),r.makeSystemsLayouts(),r.markCurvesSys(),r.markLyricsSys(),r.setHeight(),r}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Gs(t,e)}(e,t),n=e,(r=[{key:"setWidth",value:function(){var t=this.style.score,e=t.width,n=t.marginLeft,r=t.marginRight;this.width=e-n-r}},{key:"setHeight",value:function(){var t=this.systemsLayouts;this.height=t.length?c(t.map((function(t){return t.height})))+(t.length-1)*this.style.body.systemsSep:0}},{key:"createSystemHeadLayout",value:function(t){var e={nameType:t,partHeads:this.parts.map((function(t){return t.head}))},n=this.measures[0];return n&&(e.partsToCellsIndices=n.partsToCellsIndices),new gr(e,this.style)}},{key:"makeSystemsLayouts",value:function(){var t=this,e=this.style.system.align,n=this.flowSystems();"justify"===e?(this.balanceSystems(n),n.lines.forEach((function(t){return t.optimizeMeasureWidths()}))):"equal"===e&&this.equalizeSystems(n),this.systemsLayouts=[],n.lines.forEach((function(e,n){var r=t.createSystemHeadLayout(n?"abbreviation":"full"),i=e.measures,o=new ms(r,i,t.style);o.width=t.width,t.systemsLayouts.push(o)})),"justify"!==e&&"equal"!==e||this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t,r){var i=n.lines[e].ws[r];t.reflow(i)}))}))}},{key:"flowSystems",value:function(){var t=this.width,e=this.createSystemHeadLayout("full").width,n=this.createSystemHeadLayout("abbreviation").width,r=new Es({measures:this.measures,fhsw:t-e,ahsw:t-n,style:this.style}),i=r.measureMinWidths,o=[],s=e;i.forEach((function(e,r){(s+=e)===t?(o.push(r+1),s=n):s>t&&(o.push(r),s=n+e)})),a(o)!==i.length&&o.push(i.length);for(var u=o.length-1;u>0;u--)o[u]=o[u]-o[u-1];return r.lens=o,r}},{key:"balanceSystems",value:function(t){t.isBalanced||t.obstacleSectioning().forEach((function(t){return t.balanceReflow()}))}},{key:"equalizeSystems",value:function(t){var e=t.obstacleSectioning();e.forEach((function(t){return t.equalReflow(1/0)})),t.mergeSections(e),t.lines.forEach((function(t){t.isObstacle&&t.optimizeMeasureWidths()}))}},{key:"markCurvesSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(n){n.cellsLayouts.forEach((function(n,r){var i=function(n){n.systemLayout=t,n.sys=e,n.c=r};n.dataLayout.layouts.forEach((function(t){var e=t.tieLayout,n=t.beginSlursLayouts,r=t.endSlursLayouts,o=t.chord;e&&i(e),n&&n.forEach((function(t){return i(t)})),r&&r.forEach((function(t){return i(t)})),o&&t.pitchesLayout.layouts.forEach((function(t){t.tieLayout&&i(t.tieLayout)}))}))}))}))}))}},{key:"markLyricsSys",value:function(){this.systemsLayouts.forEach((function(t,e){t.measuresLayouts.forEach((function(t){t.cellsLayouts.forEach((function(t){t.dataLayout.layouts.forEach((function(t){var n=t.lyricsLayouts;n&&n.forEach((function(t){t.sys=e}))}))}))}))}))}},{key:"toJSON",value:function(){var t=this.systemsLayouts;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Ts(Object(n),!0).forEach((function(e){Ms(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Ts(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},zs(Qs(e.prototype),"toJSON",this).call(this),{systemsLayouts:t})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!Bs(t,e,n,r||t)&&i)throw new Error("failed to set property")}(Qs(e.prototype),"position",t,this,!0);var n=this.style.body.systemsSep,r=this.x,i=this.y;this.systemsLayouts.forEach((function(t){t.position={x:r,y:i},i+=t.height+n}))}}])&&Ns(n.prototype,r),i&&Ns(n,i),e}(In);function Js(t){return(Js="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function qs(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Is(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Vs(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Us(t,e){return!e||"object"!==Js(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function Ks(t,e,n){return(Ks="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=Zs(t,e);if(r){var i=Object.getOwnPropertyDescriptor(r,e);return i.get?i.get.call(n):i.value}})(t,e,n||t)}function Xs(t,e,n,r){return(Xs="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,r){var i,o=Zs(t,e);if(o){if((i=Object.getOwnPropertyDescriptor(o,e)).set)return i.set.call(r,n),!0;if(!i.writable)return!1}if(i=Object.getOwnPropertyDescriptor(r,e)){if(!i.writable)return!1;i.value=n,Object.defineProperty(r,e,i)}else Hs(r,e,n);return!0})(t,e,n,r)}function Hs(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Zs(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Ys(t)););return t}function Ys(t){return(Ys=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&$s(t,e)}function $s(t,e){return($s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var tu=function(t){function e(t){var n;Is(this,e),(n=Us(this,Ys(e).call(this))).name="score-layout",n.score=t;var r=n.style=t.style.value;return n.headLayout=new ar(t.head,r),n.bodyLayout=new Ws(t.body,r),n.setSize(),n.innerLayout=new eu(n.height,r),n.position={x:0,y:0},n}var n,r,i;return _s(e,t),n=e,(r=[{key:"setSize",value:function(){var t=this.style.score,e=t.width,n=t.marginTop,r=t.marginBottom,i=t.headBodySep,o=this.headLayout.height,a=this.bodyLayout.height;this.width=e,this.height=n+r+o+a+(o&&a?i:0)}},{key:"toJSON",value:function(){var t=this.innerLayout,n=this.headLayout,r=this.bodyLayout;return function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?qs(Object(n),!0).forEach((function(e){Hs(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):qs(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},Ks(Ys(e.prototype),"toJSON",this).call(this),{innerLayout:t,headLayout:n,bodyLayout:r})}},{key:"position",set:function(t){!function(t,e,n,r,i){if(!Xs(t,e,n,r||t)&&i)throw new Error("failed to set property")}(Ys(e.prototype),"position",t,this,!0);var n=this.style.score,r=n.marginLeft,i=n.marginTop,o=n.headBodySep,a=this.headLayout.height;this.headLayout.position={x:r,y:i},this.bodyLayout.position={x:r,y:i+a+(a?o:0)},this.innerLayout.position={x:r,y:i}}}])&&Vs(n.prototype,r),i&&Vs(n,i),e}(In),eu=function(t){function e(t,n){var r;Is(this,e),(r=Us(this,Ys(e).call(this))).name="inner-layout";var i=n.score,o=i.width,a=i.marginLeft,s=i.marginRight,u=i.marginTop,c=i.marginBottom;return r.width=o-a-s,r.height=t-u-c,r}return _s(e,t),e}(In);function nu(t){return(nu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ru(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function iu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ou(t,e,n){return e&&iu(t.prototype,e),n&&iu(t,n),t}var au=[],su=au.push,uu=au.pop,cu=au.shift,fu=au.unshift,lu=au.splice,hu=au.reverse,yu=function(t){return t&&"appendChild"in t&&"removeChild"in t},pu=function(t){return t&&"element"===t.name&&"elName"in t},bu=h(["mousedown","mouseup","click","dblclick","mousemove","mouseover","mousewheel","mouseout","contextmenu","touchstart","touchmove","touchend","touchcancel","keydown","keypress","keyup","focus","blur","change","submit","scroll","resize","hashchange","load","unload","input"]),du=h(["text","number","password","textarea","color","range","date","datetime-local","month","week","time","email","file","search","tel","url","select-multiple","select-one"]),vu=h(["svg:a","animate","animateMotion","animateTransform","circle","clipPath","color-profile","defs","desc","discard","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","foreignObject","g","hatch","hatchpath","image","line","linearGradient","marker","mask","mesh","meshgradient","meshpatch","meshrow","metadata","mpath","path","pattern","polygon","polyline","radialGradient","rect","script","set","solidcolor","stop","style","svg","switch","symbol","text","textPath","title","tspan","unknown","use","view"]),mu=function(){function t(e){var n=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;ru(this,t),this.toJSON=d("elName","attrs","content"),this.name="element",this.level=r,this.indent=i,this.elName=e.elName,this.attrs=new gu(e.attrs),this.content=[],e.content.forEach((function(e){void 0===e?n.content.push("undefined"):null===e?n.content.push("null"):"element"===e.name?n.content.push(new t(e,r+1,i)):n.content.push(e)}))}return ou(t,[{key:"eachChild",value:function(t){this.content.forEach(t)}},{key:"eachAttr",value:function(t){this.attrs.each(t)}},{key:"create",value:function(){var e,n=this.elName;this.content;return vu[n]?("svg:a"===n&&(n="a"),e=document.createElementNS("http://www.w3.org/2000/svg",n)):e=document.createElement(n),this.eachAttr((function(t,n){bu[n]?e.addEventListener(n,t):"value"===n?"function"==typeof t?(t({element:e,attrName:n}),du[e.type]&&e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):e.value=t:"checked"===n&&"checkbox"===e.type?"function"==typeof t?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.checked}))):e.checked=t:"checkedValue"===n&&"radio"===e.type?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.value}))):"selectedIndex"===n?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=e.selectedIndex}))):"selectedOptions"===n?(t({element:e,attrName:n}),e.addEventListener("input",(function(){t.data[t.dname]=Array.from(e.selectedOptions).map((function(t){return{label:t.label,value:t.value,text:t.text}}))}))):"function"==typeof t?t({element:e,attrName:n}):"style"===n?(/\n/.test(t)&&(t=t.trim().replace(/ *\n */g,";")),e.setAttribute(n,t)):e.setAttribute(n,t)})),this.eachChild((function(n){if(n instanceof t)e.appendChild(n.create());else if("object"===nu(n))"html"in n?"function"==typeof n.html?n.html(e,"html"):e.innerHTML=n.html:e.appendChild(n);else if("function"==typeof n)n(e);else{var r=document.createTextNode(n);e.appendChild(r)}})),e}},{key:"toString",value:function(){var t=this.level,e=this.indent,n=this.elName,r=this.attrs,i=this.content,a=[];return t>0&&a.push("\n"+o(" ",t*e)),a.push("<".concat(n)),r.hasAttr&&a.push(" "+r),0===i.length?a.push("/>"):"element"!==i[0].name?a.push(">".concat(i,"</").concat(n,">")):(a.push(">",i.join("")),a.push("\n",o(" ",t*e),"</".concat(n,">"))),a.join("")}}]),t}(),gu=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};ru(this,t),this.toJSON=d("value"),this.name="attrs",this.value=e}return ou(t,[{key:"each",value:function(t){var e=this.value;Object.keys(e).forEach((function(n,r){return t(e[n],n,r)}))}},{key:"toString",value:function(){var t=[];for(var e in this.value)t.push("".concat(e,'="').concat(this.value[e],'"'));return t.join(" ")}},{key:"hasAttr",get:function(){return Object.keys(this.value).length>0}}]),t}();function wu(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];return Array.isArray(n)||(n=[n]),("object"!==nu(e)||pu(e)||yu(e))&&(e=[e]),Array.isArray(e)&&(n=e,e={}),{name:"element",elName:t,attrs:e,content:n=i(n)}}wu.create=function(t,e,n){return new mu(wu(t,e,n)).create()};var Ou=function(){function t(e,n){ru(this,t),this.obj=e,this.name=n}return ou(t,[{key:"create",value:function(t,e,n){var r=wu.create(t,e,n);return this.obj[this.name]=r,r}}]),t}();wu.assign=function(t,e){return new Ou(t,e)};var Su=function(){function t(e,n){ru(this,t),this.obj=e,this.name=n}return ou(t,[{key:"create",value:function(t,e,n){var r=wu.create(t,e,n);return this.obj[this.name]=this.obj[this.name]||[],this.obj[this.name].push(r),r}}]),t}();wu.push=function(t,e){return new Su(t,e)},wu.html=function(t,e,n){return void 0===n&&(n=e,e={}),wu(t,e,{html:n})},wu.nbsp=function(t){return o(" ",t)};var ku=0,ju=function(){return""+ku++},xu=function(t,e){return pu(t)&&(t=new mu(t).create()),t.dataset.key=e,t},Lu=function(){function t(e){var n=this;ru(this,t),this.defaultData=function(t){var e={},n={},r=Object.keys(t);r.forEach((function(n){var r=t[n],i="_".concat(n),o=r.get,a=r.el;o||a?Object.defineProperty(e,n,{get:function(){return i in this?this[i]:this[i]=(o||a).apply(this)}}):e[n]=r})),r.forEach((function(t){n[t]=e[t]}));var i={$collector:[]};return r.forEach((function(t){var e="_".concat(t);Object.defineProperty(i,t,{get:function(){return this.$collector.push(t),e in this?this[e]:n[t]},set:function(t){this[e]=t}})})),r.forEach((function(e){var n=t[e],r=n.get,o=n.el,a=n.dep;(r||o)&&(r||o).apply(i),a=y(i.$collector.concat(a||[])),i.$collector.length=0,a.length&&(t[e].dep=a)})),{data:t,defaultData:n}}(e).defaultData,Object.assign(this,e),this.cacheElements={},this.depGetters={},this.makeConnectors(),Object.keys(this.defaultData).forEach((function(t){n["_".concat(t)]=n.defaultData[t]}))}return ou(t,[{key:"set",value:function(t,e){e(this[t]),this[t]=this[t]}},{key:"makeConnectors",value:function(){var t=this;Object.keys(this).forEach((function(e){"cacheElements"!==e&&"depGetters"!==e&&"defaultData"!==e&&t.hasOwnProperty(e)&&(t.cacheElements[e]=[],t["$".concat(e)]=t.makeConnector(e),t.makeAccessor(e))}))}},{key:"makeConnector",value:function(t){this[t].get;if(Array.isArray(this.defaultData[t]))return this.makeArrayConnector(t);if(this[t].el)return this.makeElConnector(t);var e=this,n=function(n,r){var i=e.cacheElements[t].length;if(e.cacheElements[t].push(n),r){var o="_".concat(t,"_html");e[o]=e[o]||[],e[o][i]=!0}e[t]=e[t]};return n.data=this,n.dname=t,n}},{key:"makeArrayConnector",value:function(t){var e=this,n=function n(r){e.cacheElements[t].push({parent:r,children:[],map:r.attrName?"":n._map.shift()}),e[t]=e[t]};n.data=this,n.dname=t,n._map=[];var r=function(t){return wu("pre",JSON.stringify(t))};return n.map=function(t){return n._map.push(t||r),n},n}},{key:"makeElConnector",value:function(t){var e=this;return function(n){e.cacheElements[t].push({parent:n,child:null}),e[t]=e[t]}}},{key:"makeAccessor",value:function(t){var e=this,n="_".concat(t),r=this[t],i=r.get,o=r.set,a=r.el,s=r.dep;s&&s.forEach((function(n){e.depGetters[n]=e.depGetters[n]||[],e.depGetters[n].push(t)})),i&&s?Array.isArray(this.defaultData[t])?this.makeGetArrayAccessor(t,n,i,o):Object.defineProperty(this,t,{get:function(){return this[n]},set:function(e){this[n]=i.apply(this),o&&void 0!==e&&o.call(this,e),this.runSetter(t,this[t])}}):a&&s?Object.defineProperty(this,t,{get:a,set:function(){this.runElSetter(t)}}):(Array.isArray(r)?this.makeArrayAccessor(t,n):Object.defineProperty(this,t,{get:function(){return this[n]},set:function(e){this[n]=e,this.runSetter(t,e)}}),this[t]=r)}},{key:"alterArrayMethods",value:function(t,e){var n=this.cacheElements[t],r=this;return Object.assign(e,{push:function(){var e=this,i=Array.from(arguments);i.forEach((function(t){var r=ju();e.keys.push(r),n.forEach((function(e){var n=xu(e.map(t));e.children.push(n),e.parent.appendChild(n)}))}));var o=su.apply(this,i);return r.setDepProp(t),o},pop:function(){n.forEach((function(t){var e=t.children.pop();e&&t.parent.removeChild(e)})),this.keys.pop();var e=uu.apply(this);return r.setDepProp(t),e},shift:function(){n.forEach((function(t){var e=t.children.shift();e&&t.parent.removeChild(e)})),this.keys.shift();var e=cu.apply(this);return r.setDepProp(t),e},unshift:function(){var e=this,i=Array.from(arguments);i.slice().reverse().forEach((function(t){var r=ju();e.keys.unshift(r),n.forEach((function(e){var n=xu(e.map(t),r);e.children.unshift(n),e.parent.prepend(n)}))}));var o=fu.apply(this,i);return r.setDepProp(t),o},splice:function(){var e=Array.from(arguments),n=lu.apply(this,e);return r.runArraySetter(t,this),n},reverse:function(){n.forEach((function(t){t.parent.textContent="",t.children.reverse(),t.children.forEach((function(e){t.parent.appendChild(e)}))})),this.keys.reverse();var e=hu.apply(this);return r.setDepProp(t),e},indexOfEl:function(t){var e=function(t){for(var e;t;){if(e=t.dataset.key)return e;t=t.parentNode}}(t);return this.keys.indexOf(e)},itemOfEl:function(t){return this[this.indexOfEl(t)]},removeAt:function(t){if(t>-1)return this.splice(t,1)},remove:function(t){var e=this.findIndex((function(e){return e===t}));return this.removeAt(e)}}),e}},{key:"makeArrayAccessor",value:function(t,e){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(n){this[e]=this.alterArrayMethods(t,n),this.runArraySetter(t,n)}})}},{key:"makeGetArrayAccessor",value:function(t,e,n,r){Object.defineProperty(this,t,{get:function(){return this[e]},set:function(i){i=this[e]=n.apply(this)||[],r&&r.call(this,i),this[e]=this.alterArrayMethods(t,i),this.runArraySetter(t,i)}})}},{key:"runSetter",value:function(t,e){var n=this;this.cacheElements[t].forEach((function(r,i){var o,a="_".concat(t,"_html");r.attrName&&(o=r.attrName,r=r.element),"value"===o?r!==document.activeElement&&(r.value=e):"checked"===o?r.checked=e:"checkedValue"===o?r.value===e&&(r.checked=!0):"selectedIndex"===o||(o?r.setAttribute(o,e):n[a]&&n[a][i]?r.innerHTML=e:r.textContent=e)})),this.setDepProp(t)}},{key:"runArraySetter",value:function(t,e){e.keys=e.map(ju),this.cacheElements[t].forEach((function(t){t.parent.attrName||(t.parent.textContent="",t.children.length=0,t.children=e.map((function(n,r){var i=xu(t.map(n,r),e.keys[r]);return t.parent.appendChild(i),i})))})),this.setDepProp(t)}},{key:"runElSetter",value:function(t){var e=this;this.cacheElements[t];this.cacheElements[t].forEach((function(n){n.child&&n.parent.removeChild(n.child);var r=e[t];pu(r)&&(r=new mu(r).create()),n.child=r,n.parent.appendChild(r)})),this.setDepProp(t)}},{key:"setDepProp",value:function(t){var e=this;this.depGetters[t]&&this.depGetters[t].forEach((function(t){/^__link_/.test(t)?e[t]():e[t]=void 0}))}}]),t}();wu.setData=function(t){return new Lu(t)};var Pu=0,Eu=function(){return"__link_"+Pu++};wu.linkData=function(){var t=Array.from(arguments),e=t.shift(),n=t.pop(),r=Eu();t.forEach((function(t){e.depGetters[t].push(r),e[r]=n}))},wu.linkData=function(){var t=Array.from(arguments),e=t.pop(),n=Au(t);n.forEach((function(t){var n=t.shift(),r=t,i=Eu();r.forEach((function(t){n.depGetters[t]=n.depGetters[t]||[],n.depGetters[t].push(i),n[i]=e}))})),e()};var Au=function(t){var e=[],n=[];return t.forEach((function(t){switch(nu(t)){case"object":n.length>=2&&e.push(n),n=[t];break;case"string":n.push(t);break;default:throw new TypeError("Incorrect el.linkData parameter ".concat(t,"."))}})),e.push(n),e};function Du(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Ru(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Tu(t,e){var n="\n    stroke-width: 0.8\n    stroke: ".concat(e||"red","\n    stroke-dasharray: 2 1\n    stroke-opacity: 0.8\n    fill: none\n  ");return wu("rect",function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Du(Object(n),!0).forEach((function(e){Ru(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Du(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},t.rect,{style:n}))}function Nu(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Cu(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Nu(Object(n),!0).forEach((function(e){zu(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Nu(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function zu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Bu(t){var e=t.titleLayout,n=t.subtitleLayout,r=t.composerLayout,i=t.lyricistLayout,o=(t.arrangerLayout,t.head),a=o.title,s=o.subtitle,u=o.composer,c=o.lyricist,f=(o.arranger,function(t){var e=t.family,n=t.size,r=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(n,"\n    text-anchor: ").concat(r,"\n  ")});return wu.create("g",[a?wu("text",Cu({},e.cxby,{style:f(Cu({},e,{anchor:"middle"}))}),a):[],s?wu("text",Cu({},n.cxby,{style:f(Cu({},n,{anchor:"middle"}))}),s):[],u?wu("text",Cu({},r.x2by,{style:f(Cu({},r,{anchor:"end"}))}),u):[],c?wu("text",Cu({},i.x2by,{style:f(Cu({},i,{anchor:"end"}))}),c):[]])}function Mu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Fu=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=""}var e,n,r;return e=t,(n=[{key:"moveTo",value:function(t,e){return this.data+="M".concat(t," ").concat(e),this}},{key:"moveBy",value:function(t,e){return this.data+="m".concat(t," ").concat(e),this}},{key:"lineTo",value:function(t,e){return this.data+="L".concat(t," ").concat(e),this}},{key:"lineBy",value:function(t,e){return this.data+="l".concat(t," ").concat(e),this}},{key:"horiTo",value:function(t){return this.data+="H".concat(t),this}},{key:"horiBy",value:function(t){return this.data+="h".concat(t),this}},{key:"vertTo",value:function(t){return this.data+="V".concat(t),this}},{key:"vertBy",value:function(t){return this.data+="v".concat(t),this}},{key:"curveTo",value:function(t,e,n,r,i,o){return this.data+="C".concat(t," ").concat(e,",").concat(n," ").concat(r,",").concat(i,", ").concat(o),this}},{key:"curveBy",value:function(t,e,n,r,i,o){return this.data+="C".concat(t," ").concat(e,",").concat(n," ").concat(r,",").concat(i,", ").concat(o),this}},{key:"close",value:function(){return this.data+="Z",this}},{key:"lines",value:function(t){var e=this;return Array.isArray(t)||(t=[t]),t.forEach((function(t){var n=t.x,r=t.y;e.moveTo(n[0],r[0]),n.forEach((function(t,n){return e.lineTo(t,r[n])}))})),this.data}},{key:"toString",value:function(){return this.data}}])&&Mu(e.prototype,n),r&&Mu(e,r),t}();function Qu(){return new Fu}var Gu=[.923,.923,.334,.334,.334,.495,.99,.997,1,1,1,.963,.936,.923,.9,.883,.241,.0268,.0268,.0268,.656,.656,.656,.495,0,0,0,.495,.656,.656,.656,.0268,.0268,.0268,.241,.883,.9,.923,.936,.963,1,1,1,.997,.99,.495,.334,.334,.334,.923,.923,.923,.709,.0803,.709,.923,.923],Wu=[.354,.273,.194,.116,.0763,.0382,.00399,.00356,.00285,.00242,.00114,0,0,0,143e-6,.00114,.045,.0957,.147,.229,.309,.388,.428,.465,.499,.5,.501,.535,.572,.612,.691,.77,.853,.904,.955,.999,1,1,1,1,.999,.998,.997,.996,.996,.962,.924,.884,.806,.727,.646,.594,.544,.5,.456,.406,.354],Ju=function(t,e){return wu("path",{d:Qu().moveTo(t[0],e[0]).curveTo(t[1],e[1],t[2],e[2],t[3],e[3]).curveTo(t[4],e[4],t[5],e[5],t[6],e[6]).curveTo(t[7],e[7],t[8],e[8],t[9],e[9]).curveTo(t[10],e[10],t[11],e[11],t[12],e[12]).curveTo(t[13],e[13],t[14],e[14],t[15],e[15]).curveTo(t[16],e[16],t[17],e[17],t[18],e[18]).curveTo(t[19],e[19],t[20],e[20],t[21],e[21]).curveTo(t[22],e[22],t[23],e[23],t[24],e[24]).lineTo(t[25],e[25]).lineTo(t[26],e[26]).curveTo(t[27],e[27],t[28],e[28],t[29],e[29]).curveTo(t[30],e[30],t[31],e[31],t[32],e[32]).curveTo(t[33],e[33],t[34],e[34],t[35],e[35]).curveTo(t[36],e[36],t[37],e[37],t[38],e[38]).curveTo(t[39],e[39],t[40],e[40],t[41],e[41]).curveTo(t[42],e[42],t[43],e[43],t[44],e[44]).curveTo(t[45],e[45],t[46],e[46],t[47],e[47]).curveTo(t[48],e[48],t[49],e[49],t[50],e[50]).curveTo(t[51],e[51],t[52],e[52],t[53],e[53]).curveTo(t[54],e[54],t[55],e[55],t[56],e[56]),style:"fill: black"})};function qu(t){var e=t.x,n=t.y,r=t.width,i=t.height,o=(t.strokeWidth,function(t,e,n){return Gu.map((function(n){return t+n*e}))}(e,r)),a=function(t,e){return Wu.map((function(n){return t+n*e}))}(n,i);return wu.create("g",[Ju(o,a)])}function Iu(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Vu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Uu(t){var e=t.partNamesLayouts,n=t.bracesLayouts,r=function(t){return"\n    font-family: ".concat(t.family,"\n    font-size: ").concat(t.size,"\n    text-anchor: end\n    alignment-baseline: middle\n  ")};return wu.create("g",[e.map((function(t){return wu("text",function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Iu(Object(n),!0).forEach((function(e){Vu(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Iu(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},t.x2cy,{style:r(t)}),t.text)})),n?n.map((function(t){return qu(t)})):[]])}function Ku(t){var e,n=t.tie,r=t.slur,i=t.lift,o=t.strokeWidth;n?e=t.showPrev?t.prevEndPoints:t.endPoints:r&&(e="("===r.value?t.endPoints:t.prevEndPoints);var a=e,s=a.x1,u=a.y1,c=a.x2,f=a.y2,l=c-s,h=f-u,y=s+l/6,p=u+h/6-i,b=c-l/6,d=f-h/6-i,v=y,m=p+o,g=b,w=d+o,O=.1*o,S=wu.create("path",{d:Qu().moveTo(s,u).horiBy(-O).curveTo(y,p,b,d,c,f).horiBy(-O).curveTo(g,w,v,m,s,u).close(),style:"fill: black"}),k=function(t){S.style.fill=t};return n?(n.onplay=function(){return k("#b5c")},n.onstop=function(){return k("black")}):r&&(r.onplay=function(){return k("#b5c")},r.onstop=function(){return k("black")}),wu.create("g",[S])}function Xu(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function Hu(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Xu(Object(n),!0).forEach((function(e){Zu(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Xu(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Zu(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Yu(t){var e=t.pitch,n=t.stepLayout,r=t.accidentalLayout,i=t.octavesLayout,o=t.tieLayout,a=t.tieMode,s="\n    font-family: ".concat(n.family,"\n    font-size: ").concat(n.size,"\n    text-anchor: middle\n  "),u="\n    font-family: ".concat(r.family,"\n    font-size: ").concat(r.size,"\n    text-anchor: middle\n  "),c={},f=function(t){c.step.style.fill=t,e.accidental&&(c.accidental.style.fill=t),e.octave&&c.octaves.forEach((function(e){e.style.fill=t}))};return e.onplay=function(){return f("#b5c")},e.onstop=function(){return f("black")},wu.create("g",[wu.assign(c,"step").create("text",Hu({},n.cxby,{style:s}),e.step),e.accidental?wu.assign(c,"accidental").create("text",Hu({},r.cxby,{style:u}),r.char):[],e.octave?i.layouts.map((function(t){return wu.push(c,"octaves").create("circle",t.circle)})):[],function(t){return!(!t||"single"===a)&&("end"!==t.tie.type||t.showPrev)}(o)?Ku(o):[]])}function _u(t){var e=t.linesLayout,n=t.beamsLayout,r=t.dotsLayout,o=t.duration,a=o.type,s=o.dots,u={},c=function(t){a<4?u.lines.forEach((function(e){e.style.fill=t})):u.beams&&u.beams.forEach((function(e){e.style.fill=t})),s&&u.dots.forEach((function(e){e.style.fill=t}))};return o.onplay=function(){return c("#b5c")},o.onstop=function(){return c("black")},wu.create("g",[a<4?e.layouts.map((function(t){return wu.push(u,"lines").create("rect",t.rect)})):[],a>4?i(n.layouts.map((function(t){var e=t.beam.type;if("single"===e||"begin"===e){var n=Object.assign({},t.rect);return"begin"===e&&(n.width=t.beamedWidth),wu.push(u,"beams").create("rect",n)}return[]}))):[],s?r.layouts.map((function(t){return wu.push(u,"dots").create("circle",t.circle)})):[]])}function $u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function tc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?$u(Object(n),!0).forEach((function(e){ec(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):$u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function ec(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function nc(t){var e=t.tuplet,n=t.textLayout,r=t.lift,i=t.strokeWidth,o=t.pitchTupletSep,a=t.endPoints,s=a.x1,u=a.y1,c=a.x2,f=a.y2,l=(s+c)/2,h=n.width/2,y=(f-u)/(c-s),p=l-h-3,b=(u-=o)-r+y*(p-s),d=l+h+3,v=(f-=o)-r+y*(d-c),m=wu.create("path",{d:Qu().moveTo(s,u).vertBy(-r).lineTo(p,b).moveTo(c,f).vertBy(-r).lineTo(d,v),style:"stroke-width: ".concat(i,"; stroke: black; fill: none")}),g={},w=function(t){m.style.stroke=t,g.text.style.fill=t};e.onplay=function(){return w("#b5c")},e.onstop=function(){return w("black")};var O,S,k;return wu.create("g",[m,wu.assign(g,"text").create("text",tc({},n.cxcy,{style:(O=n,S=O.family,k=O.size,"\n    font-family: ".concat(S,"\n    font-size: ").concat(k,"\n    text-anchor: middle\n    alignment-baseline: middle\n  "))}),n.text)])}function rc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ic(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?rc(Object(n),!0).forEach((function(e){oc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):rc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function oc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ac(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function sc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ac(Object(n),!0).forEach((function(e){uc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ac(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function uc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function cc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function fc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?cc(Object(n),!0).forEach((function(e){lc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):cc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function lc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function hc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function yc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?hc(Object(n),!0).forEach((function(e){pc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):hc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function pc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function bc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function dc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?bc(Object(n),!0).forEach((function(e){vc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):bc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function vc(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function mc(t){t.bar;var e=t.linesLayouts,n=t.dotsLayouts,r=t.displayLines,i=t.displayDots;return wu.create("g",[r?e.map((function(t){return wu("rect",t.rect)})):[],i&&n?n.map((function(t){return wu("circle",t.circle)})):[]])}function gc(t){var e=t.dataLayout,n=t.shownLeftBarLayout,r=t.rightBarLayout,o=t.shownRightBarLayout;return wu.create("g",[e.layouts.map((function(t){return"note"in t?(n=(e=t).note,r=e.pitchLayout,o=e.durationLayout,a=e.tieLayout,s=e.tupletLayout,u=e.beginSlursLayouts,c=e.endSlursLayouts,f=e.lyricsLayouts,l=function(t){var e=t.family,n=t.size,r=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(n,"\n    text-anchor: ").concat(r||"begin","\n  ")},h={},y=function(t){var e=h.lyrics,n=h.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),n&&n.forEach((function(e){return e.style.fill=t}))},n.onplay=function(){return y("orange")},n.onstop=function(){return y("black")},wu.create("g",[Yu(r),_u(o),function(t){return!!t&&("end"!==t.tie.type||t.showPrev)}(a)?Ku(a):[],function(t){return t&&"begin"===t.tuplet.type}(s)?nc(s):[],u?u.map((function(t){return Ku(t)})):[],c?i(c.map((function(t){return t.showPrev?Ku(t):[]}))):[],f?f.map((function(t){return wu.push(h,"lyrics").create("text",ic({},t.cxby,{style:l(ic({},t,{anchor:"middle"}))}),t.text)})):[],f?i(f.map((function(t){var e=t.lyric;if(!e.next)return[];var n=t.x2,r=t.by;if(e.layout.sys!==e.next.layout.sys)return wu.push(h,"hyphens").create("text",{x:n+2,y:r,style:l(t)},"-");var i=e.next.layout;if(i){var o=i.x;return wu.push(h,"hyphens").create("text",{x:(n+o)/2,y:r,style:l(ic({},t,{anchor:"middle"}))},"-")}}))):[]])):"rest"in t?function(t){var e=t.zeroLayout,n=t.durationLayout,r="\n    font-family: ".concat(e.family,"\n    font-size: ").concat(e.size,"\n    text-anchor: middle\n  ");return wu.create("g",[wu("text",sc({},t.zeroLayout.cxby,{style:r}),0),_u(n)])}(t):"chord"in t?function(t){var e=t.chord,n=t.pitchesLayout,r=t.durationLayout,o=t.tieLayout,a=t.tupletLayout,s=t.tieMode,u=t.beginSlursLayouts,c=t.endSlursLayouts,f=t.lyricsLayouts,l=function(t){var e=t.family,n=t.size,r=t.anchor;return"\n    font-family: ".concat(e,"\n    font-size: ").concat(n,"\n    text-anchor: ").concat(r||"begin","\n  ")},h={},y=function(t){var e=h.lyrics,n=h.hyphens;e&&e.forEach((function(e){return e.style.fill=t})),n&&n.forEach((function(e){return e.style.fill=t}))};return e.onplay=function(){return y("orange")},e.onstop=function(){return y("black")},wu.create("g",[n.layouts.map((function(t){return Yu(t)})),_u(r),function(t){return!("single"!==s||!t)&&("end"!==t.tie.type||t.showPrev)}(o)?Ku(o):[],function(t){return t&&"begin"===t.tuplet.type}(a)?nc(a):[],u?u.map((function(t){return Ku(t)})):[],c?i(c.map((function(t){return t.showPrev?Ku(t):[]}))):[],f?f.map((function(t){return wu.push(h,"lyrics").create("text",fc({},t.cxby,{style:l(fc({},t,{anchor:"middle"}))}),t.text)})):[],f?i(f.map((function(t){var e=t.lyric;if(!e.next)return[];var n=t.x2,r=t.by;if(e.layout.sys!==e.next.layout.sys)return wu.push(h,"hyphens").create("text",{x:n+2,y:r,style:l(t)},"-");var i=e.next.layout;if(i){var o=i.x;return wu.push(h,"hyphens").create("text",{x:(n+o)/2,y:r,style:l(fc({},t,{anchor:"middle"}))},"-")}}))):[]])}(t):"time"in t?(b=(p=t).time,d=p.beatsLayout,v=p.lineLayout,m=p.beatTypeLayout,g="font-family: ".concat(d.family,"\n                font-size: ").concat(d.size,"\n                text-anchor: middle"),w="font-family: ".concat(m.family,"\n                font-size: ").concat(m.size,"\n                text-anchor: middle"),wu.create("g",[wu("text",yc({},d.cxby,{style:g}),b.beats),wu("rect",v.rect),wu("text",yc({},m.cxby,{style:w}),b.beatType)])):"direction"in t?(x=(O=t).direction,L=O.textLayout,P=x.words,E=x.dynamics,wu.create("g",[L?wu("text",dc({},L.xby,{style:(S=L,k=S.family,j=S.size,"\n    font-family: ".concat(k,"\n    font-size: ").concat(j,"\n  "))}),P||E):[]])):"multipart"in t?function(t){return t.dataLayout,wu.create("g",[])}(t):void 0;var e,n,r,o,a,s,u,c,f,l,h,y,p,b,d,v,m,g,w,O,S,k,j,x,L,P,E})),n?mc(n):[],mc(o||r)])}function wc(t){var e=t.headLayout,n=t.measuresLayouts;return wu.create("g",[e?Uu(e):[],n.map((function(t){return n=(e=t).cellsLayouts,r=e.leftBarLayouts,i=e.rightBarLayouts,wu.create("g",[n.map((function(t){return gc(t)})),r?r.map((function(t){return mc(t)})):[],i?i.map((function(t){return mc(t)})):[]]);var e,n,r,i}))])}function Oc(t){var e=t.systemsLayouts;return wu.create("g",[e.map((function(t){return wc(t)}))])}function Sc(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function kc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var jc=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Sc(this,t),this.toJSON=d("head","body"),this.toMxl=bn,this.name="score","string"==typeof e?this.parse(new F(e)):(this.head=new W(e.head),this.body=new Ne(e.body)),this.style=new Wn(Jn),this.player=new Cn(this)}var e,n,r;return e=t,(n=[{key:"parse",value:function(t){t.skipWhite(),this.head=new W(t),this.body=new Ne(t)}},{key:"addStyle",value:function(){var t=this,e=Array.from(arguments);return e.forEach((function(e){return t.style.add(e)})),this}},{key:"render",value:function(){return function(t){t.innerLayout;var e=t.headLayout,n=t.bodyLayout;return wu.create("svg",t.wh,[Tu(t,"gray"),Bu(e),Oc(n)])}(new tu(this))}},{key:"play",value:function(){this.player.play()}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.stop()}},{key:"toString",value:function(){return[this.head,this.body].join("\n\n")}}])&&kc(e.prototype,n),r&&kc(e,r),t}();jc.fromMxl=function(t){var e=new Ge(t),n={head:{name:"head"},body:{name:"body"}},r=n.head,i=n.body,o=0;return e.root.actContent({"movement-title":function(t){r.title=t.content},identification:function(t){return t.actContent({creator:function(t){r[t.getAttr("type")]=t.content}})},credit:function(t){return Ye(t,r)},"part-list":function(t){i.parts=_e(t)},part:function(t){$e(t,i.parts[o]),o++}}),console.log(n),new jc(n)};n(0);n.d(e,"parse",(function(){return xc})),n.d(e,"fromJSON",(function(){return Lc}));var xc=function(t){return new jc(t)},Lc=function(t){return"string"==typeof t&&(t=JSON.parse(t)),new jc(t)};window.musje={parse:xc,fromJSON:Lc}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,